WCCL_PREP$wccl_SU_raw <- rowMeans(WCCL_PREP[,SU], na.rm = TRUE)
WCCL_PREP$wccl_GSC_raw <- rowMeans(WCCL_PREP[,GSC], na.rm = TRUE)
WCCL_PREP$wccl_BO_raw <- rowMeans(WCCL_PREP[,BO], na.rm = TRUE)
#Mean with 67% Rule
#Check NA Percentage
WCCL_PREP$NACheck <- rowSums(is.na(select(WCCL_PREP, starts_with("srm"))))/ncol(dplyr::select(WCCL_PREP, starts_with("srm")))
#New Mean with 67% Rule
WCCL_PREP$wccl_SU_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,SU], na.rm = TRUE), "NA")
WCCL_PREP$wccl_GSC_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,GSC], na.rm = TRUE), "NA")
WCCL_PREP$wccl_BO_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,BO], na.rm = TRUE), "NA")
# Create NDA structure column names
dbt_wccl <- paste("dbt_wccl", 1:59, sep = "")
NDA_Names <- c(dbt_wccl)
#create NDA Prep structure
NDA_WCCL_Prep <- select(WCCL_PREP, c(subjectkey = mom_guid, src_subject_id = mother_FamID, interview_date, interview_age, sex = mother_sex , visit = timepoint, starts_with("srm")))
setnames(NDA_WCCL_Prep, new_WCCL_names, NDA_Names)
#bind NDA_WCCL_Prep and NDA structure
NDA_WCCL <- bind_rows(NDA_WCCL, NDA_WCCL_Prep)
#recreate first row of NDA structure
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_WCCL))
NDA_WCCL <- bind_rows(NDA_WCCL, NDA_WCCL_Prep)
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_WCCL))
first_line[,1] <- "dbt_wccl"
first_line[,2] <- "1"
write.table(first_line, file = "dbt_wccl.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
write.table(NDA_WCCL, file = "dbt_wccl.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
View(first_line)
View(NDA_WCCL)
library(dplyr)
library(eeptools)
library(tidyverse)
library(data.table)
library(kableExtra)
library(knitr)
options(digits = 3)
knitr::opts_chunk$set(echo = TRUE)
#Importing Pedigree/NDA Structure
Pedigree <- read.csv("Reference_Pedigree.csv")
NDA_WCCL <- read.csv("dbt_wccl01_template.csv", skip = 1)
# Import WCCL Files
UO_T1_WCCL <- read.csv("UO_T1_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T1_WCCL <- read.csv("UPMC_T1_WCCL.csv", stringsAsFactors = FALSE)
UO_T2_WCCL <- read.csv("UO_T2_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T2_WCCL <- read.csv("UPMC_T2_WCCL.csv", stringsAsFactors = FALSE)
UO_T3_WCCL <- read.csv("UO_T3_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T3_WCCL <- read.csv("UPMC_T3_WCCL.csv", stringsAsFactors = FALSE)
UO_T4_WCCL <- read.csv("UO_T4_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T4_WCCL <- read.csv("UPMC_T4_WCCL.csv", stringsAsFactors = FALSE)
# creating new variable names
wccl <- "srm_wccl"
num_items <- seq(1:59)
new_WCCL_names <- paste(wccl, num_items, sep = "_")
UO_Q155 <- "Q155"
old_UO_WCCL_names <- paste(UO_Q155, num_items, sep = "_")
#Replace old UO variable names with newly created names
setnames(UO_T1_WCCL, old_UO_WCCL_names, new_WCCL_names)
setnames(UO_T2_WCCL, old_UO_WCCL_names, new_WCCL_names)
setnames(UO_T3_WCCL, old_UO_WCCL_names, new_WCCL_names)
setnames(UO_T4_WCCL, old_UO_WCCL_names, new_WCCL_names)
#Replace old UPMC variable names with newly created names
UPMC_Q5 <- "Q5.1"
old_UPMC_WCCL_names <- paste(UPMC_Q5, num_items, sep = "_")
setnames(UPMC_T1_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
setnames(UPMC_T2_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
setnames(UPMC_T3_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
setnames(UPMC_T4_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
#edit UO WCCL time 1-4 to have only WCCL questions and fam ID
UO_T1_WCCL <- select(UO_T1_WCCL, c(FamID=Q221, contains(wccl)))
UO_T2_WCCL <- select(UO_T2_WCCL, c(FamID=Q116, contains(wccl)))
UO_T3_WCCL <- select(UO_T3_WCCL, c(FamID=Q174, contains(wccl)))
UO_T4_WCCL <- select(UO_T4_WCCL, c(FamID=Q203, contains(wccl)))
#Edit UPMC T1-4 so only WCCL and FamID are left
UPMC_T1_WCCL <- select(UPMC_T1_WCCL, c(FamID=Q1.2, contains(wccl)))
UPMC_T2_WCCL <- select(UPMC_T2_WCCL, c(FamID=Q1.2, contains(wccl)))
UPMC_T3_WCCL <- select(UPMC_T3_WCCL, c(FamID=Q1.2, contains(wccl)))
UPMC_T4_WCCL <- select(UPMC_T4_WCCL, c(FamID=Q1.2, contains(wccl)))
#Binding UPMC And UO by time point
WCCL_T1 <- rbind(UO_T1_WCCL, UPMC_T1_WCCL)
WCCL_T2 <- rbind(UO_T2_WCCL, UPMC_T2_WCCL)
WCCL_T3 <- rbind(UO_T3_WCCL, UPMC_T3_WCCL)
WCCL_T4 <- rbind(UO_T4_WCCL, UPMC_T4_WCCL)
#setup Pedigree data by time point
Pedigree_T1 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time1Date, interview_age = MomAge_T1, GroupAssignment)
Pedigree_T2 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time2Date, interview_age = MomAge_T2, GroupAssignment)
Pedigree_T3 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time3Date, interview_age = MomAge_T3, GroupAssignment)
Pedigree_T4 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time4Date, interview_age = MomAge_T4, GroupAssignment)
#merge Pedigree and WCCL by time point
WCCL_T1 <- merge(Pedigree_T1, WCCL_T1, by = 'FamID')
WCCL_T2 <- merge(Pedigree_T2, WCCL_T2, by = 'FamID')
WCCL_T3 <- merge(Pedigree_T3, WCCL_T3, by = 'FamID')
WCCL_T4 <- merge(Pedigree_T4, WCCL_T4, by = 'FamID')
#add time point column/populate with corresponding time point
WCCL_T1$timepoint <- "Time 1"
WCCL_T2$timepoint <- "Time 2"
WCCL_T3$timepoint <- "Time 3"
WCCL_T4$timepoint <- "Time 4"
#Create WCCL_prep and merge datasets
WCCL_PREP <- rbind(WCCL_T1, WCCL_T2, WCCL_T3, WCCL_T4)
#Clean Global Environment
rm(UO_T1_WCCL, UO_T2_WCCL, UO_T3_WCCL, UO_T4_WCCL, UPMC_T1_WCCL, UPMC_T2_WCCL, UPMC_T3_WCCL, UPMC_T4_WCCL, Pedigree, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, WCCL_T1, WCCL_T2, WCCL_T3, WCCL_T4)
#Recode Text to Integers
WCCL_PREP <- WCCL_PREP %>% mutate_at(new_WCCL_names,funs(recode(., '0 Never Used' = 0, '1 Rarely Used' = 1, '2 Sometimes Used' = 2, '3 Regularly Used' = 3,.default = NaN)))
#Change Numbers to Numeric values
WCCL_PREP[,1:59] <- sapply(WCCL_PREP[,1:59],as.numeric)
#Change gender to F instead of false
WCCL_PREP$mother_sex <- "F"
#Items for SU
SU <- colnames(select(WCCL_PREP, c("srm_wccl_1", "srm_wccl_2", "srm_wccl_4", "srm_wccl_6", "srm_wccl_9", "srm_wccl_10", "srm_wccl_11", "srm_wccl_13", "srm_wccl_16", "srm_wccl_18", "srm_wccl_19", "srm_wccl_21", "srm_wccl_22", "srm_wccl_23", "srm_wccl_26", "srm_wccl_27", "srm_wccl_29", "srm_wccl_31", "srm_wccl_33", "srm_wccl_34", "srm_wccl_35", "srm_wccl_36", "srm_wccl_38", "srm_wccl_39", "srm_wccl_40", "srm_wccl_42", "srm_wccl_43", "srm_wccl_44", "srm_wccl_47", "srm_wccl_49", "srm_wccl_50", "srm_wccl_51", "srm_wccl_53", "srm_wccl_54", "srm_wccl_56", "srm_wccl_57", "srm_wccl_58", "srm_wccl_59")))
#Items for GSC
GSC <- colnames(select(WCCL_PREP, c("srm_wccl_3", "srm_wccl_5", "srm_wccl_8", "srm_wccl_12", "srm_wccl_14", "srm_wccl_17", "srm_wccl_20", "srm_wccl_25", "srm_wccl_32", "srm_wccl_37", "srm_wccl_41", "srm_wccl_45", "srm_wccl_46", "srm_wccl_52", "srm_wccl_55")))
#Items for BO
BO <- colnames(select(WCCL_PREP, c("srm_wccl_7", "srm_wccl_15", "srm_wccl_24", "srm_wccl_28", "srm_wccl_30", "srm_wccl_48")))
#Calculated Columns
WCCL_PREP$wccl_SU_raw <- rowMeans(WCCL_PREP[,SU], na.rm = TRUE)
WCCL_PREP$wccl_GSC_raw <- rowMeans(WCCL_PREP[,GSC], na.rm = TRUE)
WCCL_PREP$wccl_BO_raw <- rowMeans(WCCL_PREP[,BO], na.rm = TRUE)
#Mean with 67% Rule
#Check NA Percentage
WCCL_PREP$NACheck <- rowSums(is.na(select(WCCL_PREP, starts_with("srm"))))/ncol(dplyr::select(WCCL_PREP, starts_with("srm")))
#New Mean with 67% Rule
WCCL_PREP$wccl_SU_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,SU], na.rm = TRUE), "NA")
WCCL_PREP$wccl_GSC_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,GSC], na.rm = TRUE), "NA")
WCCL_PREP$wccl_BO_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,BO], na.rm = TRUE), "NA")
# Create NDA structure column names
dbt_wccl <- paste("dbt_wccl", 1:59, sep = "")
NDA_Names <- c(dbt_wccl)
#create NDA Prep structure
NDA_WCCL_Prep <- select(WCCL_PREP, c(subjectkey = mom_guid, src_subject_id = mother_FamID, interview_date, interview_age, sex = mother_sex , visit = timepoint, starts_with("srm")))
setnames(NDA_WCCL_Prep, new_WCCL_names, NDA_Names)
#bind NDA_WCCL_Prep and NDA structure
NDA_WCCL <- bind_rows(NDA_WCCL, NDA_WCCL_Prep)
#recreate first row of NDA structure
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_WCCL))
NDA_WCCL <- bind_rows(NDA_WCCL, NDA_WCCL_Prep)
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_WCCL))
first_line[,1] <- "dbt_wccl"
first_line[,2] <- "1"
write.table(first_line, file = "dbt_wccl.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
write.table(NDA_WCCL, file = "dbt_wccl.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
View(NDA_WCCL_Prep)
#Progress DBT_WCCL Table
Progress <- select(WCCL_PREP, c(FamID, GroupAssignment, timepoint, starts_with("srm")))
#calculate rowmeans for each individual
Progress$Row_Mean <- rowMeans(select(WCCL_PREP,c(starts_with("srm"))), na.rm = T)
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$FamID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(Row_Mean,na.rm = T),count = n())
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Means
Both_site_Mean <- Progress_Mean %>%
group_by(GroupAssignment, timepoint) %>%
summarise(BothSiteMean = mean(GroupMean,na.rm = T),n = sum(count))
#Progress_Mean <- Progress_Mean[order(GroupAssignment),]
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "GroupMean"] = "UO_WCCL"
colnames(UPMC)[colnames(UPMC) == "GroupMean"] = "UPMC_WCCL"
#Append Row to UO dataframe, populate with NA
UO[nrow(UO)+ 1,] = NA
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_WCCL","GroupAssignment")],UPMC[,"UPMC_WCCL"],Both_site_Mean[,c("BothSiteMean","n")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_header_above(c(" " = 1, "DBT Group means" = 4, "FSU means" = 4, "Controls means" = 4))
library(data.table)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE, include = FALSE)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
fsep <- .Platform$file.sep;
# Set the working directory ---------
# for Bryan
# setwd("C:/Users/bryan/Documents/GitHub/DataUploadAutomation/Measures/CCNES")
setwd("~/Documents/Min/Coding/DataUploadAutomation/Measures/CCNES")
library(data.table)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE, include = FALSE)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
fsep <- .Platform$file.sep;
# Set the working directory -----
# for Bryan
# setwd("C:/Users/bryan/Documents/GitHub/DataUploadAutomation/Measures/CBCL")
setwd("D:/Austin/College (D-Drive)/DataUploadAutomation/Measures/CBCL")
# Import Pedigree and NDA Structure
Pedigree <- read.csv("Reference_Pedigree.csv")
NDA_CBCL <- read.csv("cbcl1_501_template.csv", skip = 1)
# Import cbcl Files
UO_T1_cbcl <- read.csv(file = 'UO_T1_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T2_cbcl <- read.csv(file = 'UO_T2_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T3_cbcl <- read.csv(file = 'UO_T3_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T4_cbcl <- read.csv(file = 'UO_T4_Qualtrics.csv', stringsAsFactors = FALSE)
UPMC_T1_cbcl <- read.csv(file = 'UPMC_T1_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T2_cbcl <- read.csv(file = 'UPMC_T2_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T3_cbcl <- read.csv(file = 'UPMC_T3_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T4_cbcl <- read.csv(file = 'UPMC_T4_cbcl.csv', stringsAsFactors = FALSE)
# Create list of new variable names
new_cbcl_names <- sprintf("srm_cbcl_%03d", seq(1:100))
# Create list of old variable names so we can replace them with the new ones
# Since the question names change by timepoint we'll have to make unique lists by timepoint.
old_UO_cbcl_names_T1 <- sprintf("Q264_%01d", seq(1:100))
old_UPMC_cbcl_names_T1_T4 <- sprintf("Q15.1_%01d", seq(1:100))
#Same as above for different timepoints
old_UO_cbcl_names_T2 <- sprintf("Q368_%01d", seq(1:100))
old_UPMC_cbcl_names_T2_T3 <- sprintf("Q12.1_%01d", seq(1:100))
#Same as above but UO has a different question number to select for each timepoint
old_UO_cbcl_names_T3 <- sprintf("Q534_%01d", seq(1:100))
#Same as above for UO timepoint 4
old_UO_cbcl_names_T4 <- sprintf("Q828_%01d", seq(1:100))
# Replace UO column names (there may be errors from the CBCL TEXT question responses)
setnames(UO_T1_cbcl, old_UO_cbcl_names_T1, new_cbcl_names)
setnames(UO_T2_cbcl, old_UO_cbcl_names_T2, new_cbcl_names)
setnames(UO_T3_cbcl, old_UO_cbcl_names_T3, new_cbcl_names)
setnames(UO_T4_cbcl, old_UO_cbcl_names_T4, new_cbcl_names)
# Replace UPMC column names (there may be errors from the CBCL TEXT question responses)
setnames(UPMC_T1_cbcl, old_UPMC_cbcl_names_T1_T4, new_cbcl_names)
setnames(UPMC_T2_cbcl, old_UPMC_cbcl_names_T2_T3, new_cbcl_names)
setnames(UPMC_T3_cbcl, old_UPMC_cbcl_names_T2_T3, new_cbcl_names)
setnames(UPMC_T4_cbcl, old_UPMC_cbcl_names_T1_T4, new_cbcl_names)
# Edit UO cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UO_T1_cbcl <- select(UO_T1_cbcl, c(FamID = Q221, contains("cbcl")))
# Edit UO cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UO_T1_cbcl <- select(UO_T1_cbcl, c(FamID = Q221, contains("cbcl")))
library(dplyr)
# Edit UO cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UO_T1_cbcl <- select(UO_T1_cbcl, c(FamID = Q221, contains("cbcl")))
UO_T2_cbcl <- select(UO_T2_cbcl, c(FamID = Q116, contains("cbcl")))
UO_T3_cbcl <- select(UO_T3_cbcl, c(FamID = Q174, contains("cbcl")))
UO_T4_cbcl <- select(UO_T4_cbcl, c(FamID = Q203, contains("cbcl")))
# Edit UPMC cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UPMC_T1_cbcl <- select(UPMC_T1_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T2_cbcl <- select(UPMC_T2_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T3_cbcl <- select(UPMC_T3_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T4_cbcl <- select(UPMC_T4_cbcl, c(FamID = Q1.2, contains("cbcl")))
# Bind UO and UPMC cbcl Data By Time Point
cbcl_T1 <- rbind(UO_T1_cbcl, UPMC_T1_cbcl)
cbcl_T2 <- rbind(UO_T2_cbcl, UPMC_T2_cbcl)
cbcl_T3 <- rbind(UO_T3_cbcl, UPMC_T3_cbcl)
cbcl_T4 <- rbind(UO_T4_cbcl, UPMC_T4_cbcl)
# Clean Global Enviorment
rm(UO_T1_cbcl, UO_T2_cbcl, UO_T3_cbcl, UO_T4_cbcl, UPMC_T1_cbcl, UPMC_T2_cbcl, UPMC_T3_cbcl, UPMC_T4_cbcl,
old_UO_cbcl_names_T1, old_UO_cbcl_names_T2, old_UO_cbcl_names_T3, old_UO_cbcl_names_T4, old_UPMC_cbcl_names_T1_T4, old_UPMC_cbcl_names_T2_T3)
# Create the Predigree data for each Time Point
# Resolve issue with relationship column
Pedigree_T1 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T1, interview_date = Time1Date, GroupAssignment)
Pedigree_T2 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T2, interview_date = Time2Date, GroupAssignment)
Pedigree_T3 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T3, interview_date = Time3Date, GroupAssignment)
Pedigree_T4 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T4, interview_date = Time4Date, GroupAssignment)
# Merge Pedigree data to cbcl Time Points
cbcl_T1 <- merge(Pedigree_T1, cbcl_T1, by = 'FamID')
cbcl_T2 <- merge(Pedigree_T2, cbcl_T2, by = 'FamID')
cbcl_T3 <- merge(Pedigree_T3, cbcl_T3, by = 'FamID')
cbcl_T4 <- merge(Pedigree_T4, cbcl_T4, by = 'FamID')
# Clean Global Enviorment
rm(Pedigree, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
# Create Time Point coloumn in each cbcl Sheet and populate the cell with time point
cbcl_T1$timepoint <- "Time 1"
cbcl_T2$timepoint <- "Time 2"
cbcl_T3$timepoint <- "Time 3"
cbcl_T4$timepoint <- "Time 4"
# Rename each of the cbcl Date and Age coloumns so they match
#cbcl_T1 <- cbcl_T1 %>% rename( interview_date = Time1Date, interview_age = MomAge_T1)
#cbcl_T2 <- cbcl_T2 %>% rename( interview_date = Time2Date, interview_age = MomAge_T2)
#cbcl_T3 <- cbcl_T3 %>% rename( interview_date = Time3Date, interview_age = MomAge_T3)
#cbcl_T4 <- cbcl_T4 %>% rename( interview_date = Time4Date, interview_age = MomAge_T4)
# Bind all cbcl Time Points togeather creating the cbcl_Prep sheet
cbcl_Prep <- rbind(cbcl_T1, cbcl_T2, cbcl_T3, cbcl_T4)
# Clean Global Enviorment
rm(cbcl_T1, cbcl_T2, cbcl_T3, cbcl_T4)
# Recode responses into numbers
cbcl_Prep <- cbcl_Prep %>%
mutate_at(new_cbcl_names,
funs(recode(., "Not True (as far as you know)" = 0,
"Somewhat or Sometimes True" = 1,
"Very True or Often True" = 2,.default = NaN)))
# Created calculated columns
cbcl_Prep <- add_column(cbcl_Prep, cbcl_er = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
library(dplyr)
# Created calculated columns
cbcl_Prep <- add_column(cbcl_Prep, cbcl_er = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
library(dplyr)
library(data.table)
# Created calculated columns
cbcl_Prep <- add_column(cbcl_Prep, cbcl_er = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
library(tidyverse)
# Created calculated columns
cbcl_Prep <- add_column(cbcl_Prep, cbcl_er = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ad = rowSums(cbcl_Prep[, c("srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047", "srm_cbcl_068", "srm_cbcl_087",
"srm_cbcl_090")]),.after = "cbcl_er")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_sc = rowSums(cbcl_Prep[, c("srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019", "srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045",
"srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093")]),.after = "cbcl_ad")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_w = rowSums(cbcl_Prep[, c("srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_067", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_sc")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_sp = rowSums(cbcl_Prep[, c("srm_cbcl_022", "srm_cbcl_038", "srm_cbcl_048", "srm_cbcl_064", "srm_cbcl_074",
"srm_cbcl_084")]),.after = "cbcl_w")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ap = rowSums(cbcl_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059",
"srm_cbcl_095")]),.after = "cbcl_sp")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ab = rowSums(cbcl_Prep[, c("srm_cbcl_008", "srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029",
"srm_cbcl_035", "srm_cbcl_040", "srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066",
"srm_cbcl_069", "srm_cbcl_081", "srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_ap")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_op = rowSums(cbcl_Prep[, c("srm_cbcl_003", "srm_cbcl_009", "srm_cbcl_011", "srm_cbcl_013", "srm_cbcl_014", "srm_cbcl_017", "srm_cbcl_025",
"srm_cbcl_026", "srm_cbcl_028", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_034", "srm_cbcl_036",
"srm_cbcl_041", "srm_cbcl_049", "srm_cbcl_050", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_057", "srm_cbcl_060",
"srm_cbcl_061", "srm_cbcl_063", "srm_cbcl_065", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_075", "srm_cbcl_076",
"srm_cbcl_077", "srm_cbcl_080", "srm_cbcl_089", "srm_cbcl_091", "srm_cbcl_094")]),.after = "cbcl_ab")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_int = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099", "srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047",
"srm_cbcl_068", "srm_cbcl_087", "srm_cbcl_090", "srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019",
"srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045", "srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093",
"srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_067", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_op")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ext = rowSums(cbcl_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059", "srm_cbcl_095", "srm_cbcl_008", "srm_cbcl_015",
"srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029", "srm_cbcl_035", "srm_cbcl_040",
"srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066", "srm_cbcl_069", "srm_cbcl_081",
"srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_int")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_total = rowSums(cbcl_Prep[, c("srm_cbcl_001", "srm_cbcl_002", "srm_cbcl_003", "srm_cbcl_004", "srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_007",
"srm_cbcl_008", "srm_cbcl_009", "srm_cbcl_010", "srm_cbcl_011", "srm_cbcl_012", "srm_cbcl_013", "srm_cbcl_014",
"srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_017", "srm_cbcl_018", "srm_cbcl_019", "srm_cbcl_020", "srm_cbcl_021",
"srm_cbcl_022", "srm_cbcl_023", "srm_cbcl_024", "srm_cbcl_025", "srm_cbcl_026", "srm_cbcl_027", "srm_cbcl_028",
"srm_cbcl_029", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_033", "srm_cbcl_034", "srm_cbcl_035",
"srm_cbcl_036", "srm_cbcl_037", "srm_cbcl_038", "srm_cbcl_039", "srm_cbcl_040", "srm_cbcl_041", "srm_cbcl_042",
"srm_cbcl_043", "srm_cbcl_044", "srm_cbcl_045", "srm_cbcl_046", "srm_cbcl_047", "srm_cbcl_048", "srm_cbcl_049",
"srm_cbcl_050", "srm_cbcl_051", "srm_cbcl_052", "srm_cbcl_053", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_056",
"srm_cbcl_057", "srm_cbcl_058", "srm_cbcl_059", "srm_cbcl_060", "srm_cbcl_061", "srm_cbcl_062", "srm_cbcl_063",
"srm_cbcl_064", "srm_cbcl_065", "srm_cbcl_066", "srm_cbcl_067", "srm_cbcl_068", "srm_cbcl_069", "srm_cbcl_070",
"srm_cbcl_071", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_074", "srm_cbcl_075", "srm_cbcl_076", "srm_cbcl_077",
"srm_cbcl_078", "srm_cbcl_079", "srm_cbcl_080", "srm_cbcl_081", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_084",
"srm_cbcl_085", "srm_cbcl_086", "srm_cbcl_087", "srm_cbcl_088", "srm_cbcl_089", "srm_cbcl_090", "srm_cbcl_091",
"srm_cbcl_092", "srm_cbcl_093", "srm_cbcl_094", "srm_cbcl_095", "srm_cbcl_096", "srm_cbcl_097", "srm_cbcl_098",
"srm_cbcl_099")]),.after = "cbcl_ext")
# Experiment to condense the code. cbcl total all starts with srm_cbcl_0 but I can't seem to make it work.
# cbcl_Prep <- add_column(cbcl_Prep, cbcl_total_experiment = rowSums(cbcl_Prep, starts_with("srm_cbcl_0")),.after = "cbcl_ext")
# NDA Sheet ----------------------------------------------------------------------------
# Create NDA prep sheet, select all the needed columns from prep sheet
NDA_cbcl_Prep <- select(cbcl_Prep, c(subjectkey = child_guid, src_subject_id = child_FamID, sex = child_sex ,interview_age, interview_date, starts_with("srm")))
# NDA structure Column Names (work in progress)
NDA_cbcl_Names <- paste(c("cbcl56a", "cbcl1", "cbcl_nt", "cbcl_eye", "cbcl8", "cbcl10", "cbcl_out", "cbcl_wait", "cbcl_chew", "cbcl11", "cbcl_help", "cbcl49", "cbcl14", "cbcl15", "cbcl_defiant", "cbcl_dem", "cbcl20",
"cbcl21", "cbcl_diar", "cbcl_disob", "cbcl_dist", "cbcl_alonsleep", "cbcl_answer", "cbcl24", "cbcl25", "cbcl_fun", "cbcl26", "cbcl_home", "cbcl_frust", "cbcl27", "cbcl_eat", "cbcl29", "cbcl_feel", "cbcl36",
"cbcl37", "cbcl_every", "cbcl_upset", "cbcl_troubsleep", "cbcl56b", "cbcl_hit", "cbcl_breath", "cbcl_hurt", "cbcl_unhap", "cbcl_angry", "cbcl56c", "cbcl46", "cbcl45", "cbcl47", "cbcl53", "cbcl54", "cbcl_panic",
"cbcl_bow", "cbcl57", "cbcl58", "cbcl60", "cbcl62", "cbcl56d", "cbcl_punish", "cbcl_shift", "cbcl56e", "cbcl_reat", "cbcl_play", "cbcl_rock", "cbcl_bed", "cbcl_toil", "cbcl68", "cbcl_aff", "cbcl71", "cbcl_selfish",
"cbcl_littleaf", "cbcl_inter", "cbcl_fear", "cbcl75", "cbcl76", "cbcl_smear", "cbcl79", "cbcl_stares", "cbcl56f", "cbcl_sad", "cbcl84", "cbcl86", "cbcl87", "cbcl88", "cbcl_crie", "cbcl95", "cbcl_clean", "cbcl50",
"cbcl_uncoop", "cbcl102", "cbcl103", "cbcl104", "cbcl_people", "cbcl56g", "cbcl_wake", "cbcl_wand", "cbcl19", "cbcl109", "cbcl_withdr", "cbcl112", "cbcl113a"))
# Combine NDA and prep sheet
# Make sure put original NDA structure at first, because the order of the new sheet will be the order of the first item in bind_rows function
setnames(NDA_cbcl_Prep, new_cbcl_names, NDA_cbcl_Names)
# Recreate first line in orignial NDA file
# Make a empty row, with same number of column in NDA_CCBL, as first line of NDA sheet
# ncol(NDA_CCNES)  is number of columns in NDA_CBCL
NDA_CBCL <- bind_rows(NDA_CBCL,NDA_cbcl_Prep)
# Recreate first line in orignial NDA file
# Make a empty row, with same number of column in NDA_CBCL, as first line of NDA sheet
# ncol(NDA_CBCL)  is number of columns in NDA_CBCL
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_CBCL))
# assign the first cell in first_line as cbcl1_5 which is the first cell in orignial NDA structure
first_line[,1] <- "cbcl1_5"
# assign the second cell in first_line as "1"
first_line[,2] <- "1"
# Create a new file in folder called cbcl1_5.csv, and put first line into this file
# cbcl1_5.csv file will be saved into same folder as current r script
write.table(first_line, file = "cbcl1_5.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in NDA_CCNES into cbcl1_5.csv file
write.table(NDA_CBCL, file = 'cbcl1_5.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
# Select needed column
Progress <- select(cbcl_Prep, c(FamID, GroupAssignment, timepoint, starts_with("srm")))
View(Progress)
View(cbcl_Prep)
Progress <- select(cbcl_Prep, c(FamID, GroupAssignment, timepoint, cbcl_ext, cbcl_int, cbcl_total, starts_with("srm")))
View(Progress)
ID <- c(as.character(Progress$FamID))
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
View(Progress)
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(cbcl_total,na.rm = T),count = n())
View(Progress)
View(Progress_Mean)
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(cbcl_total,na.rm = T),count = n())
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(cbcl_int,na.rm = T),count = n())
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(cbcl_ext,na.rm = T),count = n())
View(Progress_Mean)
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(cbcl_total,na.rm = T),count = n())
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(IntMean = mean(cbcl_int,na.rm = T),count = n())
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(ExtMean = mean(cbcl_ext,na.rm = T),count = n())
View(Progress_Mean)
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(cbcl_total,na.rm = T),count = n())
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(IntMean = mean(cbcl_int,na.rm = T),count = n())
Progress_Total_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(cbcl_total,na.rm = T),count = n())
Progress_Int_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(IntMean = mean(cbcl_int,na.rm = T),count = n())
Progress_Ext_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(ExtMean = mean(cbcl_ext,na.rm = T),count = n())
View(Progress_Mean)
View(Progress_Ext_Mean)
# Join Total, Int, and Ext
Progress_Mean <- merge(Progress_Total_Mean, Progress_Int_Mean, Progress_Ext_Mean)
Progress_Mean <- merge(Progress_Int_Mean, Progress_Ext_Mean)
View(Progress_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Total_Mean)
View(Progress_Mean)
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
View(Progress_Mean)
# Calculate Both site Mean
Progress_Total_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("Both Site Total Mean" = mean(cbcl_total,na.rm = T),n = sum(count))
Progress_Total_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("Both Site Total Mean" = mean(cbcl_total,na.rm = T),n = n())
View(Progress_Total_Mean_Both)
Progress_Int_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("Both Site Int Mean" = mean(cbcl_int,na.rm = T),n = n())
Progress_Ext_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("Both Site Ext Mean" = mean(cbcl_ext,na.rm = T),n = n())
Both_Site_Mean <- merge(Progress_Int_Mean_Both, Progress_Ext_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Total_Mean_Both)
View(Both_Site_Mean)
View(Both_site_Mean)
View(Both_site_Mean)
colnames(UO)[colnames(UO) == "TotalMean"] = "UO_TotalMean"
colnames(UO)[colnames(UO) == "IntMean"] = "UO_IntMean"
colnames(UO)[colnames(UO) == "ExtMean"] = "UO_ExtMean"
colnames(UPMC)[colnames(UPMC) == "TotalMean"] = "UPMC_TotalMean"
colnames(UPMC)[colnames(UPMC) == "IntMean"] = "UPMC_IntMean"
colnames(UPMC)[colnames(UPMC) == "ExtMean"] = "UPMC_ExtMean"
View(Progress)
View(Progress_Mean)
Mean_Table <- data.frame(UO[,c("UO_TotalMean","UO_IntMean", "UO_ExtMean")],UPMC[,"UPMC_TotalMean", "UPMC_IntMean", "UPMC_ExtMean"],Both_Site_Mean[,c("Both Site Int Mean", "Both Site Int Mean", "Both Site Ext Mean","n", "GroupAssignment")])
Mean_Table <- data.frame(UO[,c("UO_TotalMean","UO_IntMean")],UPMC[,"UPMC_TotalMean", "UPMC_IntMean"],Both_Site_Mean[,c("Both Site Int Mean", "Both Site Int Mean", "Both Site Ext Mean","n", "GroupAssignment")])
Mean_Table <- data.frame(UO[,c("UO_TotalMean","UO_IntMean", "UO_ExtMean")],UPMC[,c("UPMC_TotalMean", "UPMC_IntMean", "UPMC_ExtMean")],Both_Site_Mean[,c("Both Site Int Mean", "Both Site Int Mean", "Both Site Ext Mean","n", "GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("CBCL Mean Table" = 13))
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("CBCL Mean Table" = 13))
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_TotalMean","UO_IntMean", "UO_ExtMean")],UPMC[,c("UPMC_TotalMean", "UPMC_IntMean", "UPMC_ExtMean")],Both_Site_Mean[,c("Both Site Total Mean", "Both Site Int Mean", "Both Site Ext Mean","n", "GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("CBCL Mean Table" = 13))
