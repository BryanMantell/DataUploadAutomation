#Exchange commas out of Prep Sheet to avoid CSV issues. Personal selection was a "/" but you can change it here to preference.
Redcap_Data <- sapply(Redcap_Data, gsub, pattern = ",", replacement= "/")
# Merge Predigree and redcap files
ES_PREP <- merge(Pedigree_Prep, Redcap_Data,by = c("timepoint","Fam_ID"), all = TRUE)
# Clean Environment
rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Redcap_Data)
# Set neccessary data to numeric so they can be used in calculations
ES_PREP[, c(10:12,14:16,18:20)] <- sapply(ES_PREP[, c(10:12,14:16,18:20)], as.numeric)
# Created calculated columns
ES_PREP <- add_column(ES_PREP, oc_es_hap_total = rowSums(ES_PREP[, c("oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3")]),.after = "oc_es_hap_3")
ES_PREP <- add_column(ES_PREP, oc_es_ang_total = rowSums(ES_PREP[, c("oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3")]),.after = "oc_es_ang_3")
ES_PREP <- add_column(ES_PREP, oc_es_sad_total = rowSums(ES_PREP[, c("oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")]),.after = "oc_es_sad_3")
# Create NDA prep sheet, select all the needed columns from prep sheet
NDA_ES_Prep <- select(ES_PREP, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_es_") ))
# Replace columns name
setnames(NDA_ES_Prep, new_ES_names, NDA_ES_names)
# Recreate first line in orignial NDA file
NDA_ES <- bind_rows(NDA_ES, NDA_ES_Prep)
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_ES))
first_line[,1] <- "ers"
# assign the second cell in first_line as 1
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called dccs.csv, and put first line into this file
# dccs.csv file will be saved into same folder as current r script
write.table(first_line, file = "ers01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in NDA_DCCS into dccs.cav file
write.table(NDA_ES, file = 'ers01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
#Clean Global Environment
rm(first_line, NDA_ES, NDA_ES_Prep, NDA_ES_names, new_ES_names, old_ES_names)
# Treatment Progress sheet
# Select needed column
Progress <- select(ES_PREP, c(Fam_ID, GroupAssignment, timepoint, oc_es_hap_total, oc_es_ang_total, oc_es_sad_total))
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Hap_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(HapMean = mean(oc_es_hap_total,na.rm = T),count = n())
Progress_Ang_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(AngMean = mean(oc_es_ang_total,na.rm = T),count = n())
Progress_Sad_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(SadMean = mean(oc_es_sad_total,na.rm = T),count = n())
# Join Happy, Angry, and Sad
Progress_Mean <- merge(Progress_Hap_Mean, Progress_Ang_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Sad_Mean)
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Mean
Progress_Hap_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_HappyMean" = mean(oc_es_hap_total,na.rm = T),n = n())
Progress_Ang_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_AngryMean" = mean(oc_es_ang_total,na.rm = T),n = n())
Progress_Sad_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_SadMean" = mean(oc_es_sad_total,na.rm = T),n = n())
Both_Site_Mean <- merge(Progress_Hap_Mean_Both, Progress_Ang_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Sad_Mean_Both)
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "HapMean"] = "UO_ES_HappyMean"
colnames(UO)[colnames(UO) == "AngMean"] = "UO_ES_AngryMean"
colnames(UO)[colnames(UO) == "SadMean"] = "UO_ES_SadMean"
colnames(UPMC)[colnames(UPMC) == "HapMean"] = "UPMC_ES_HappyMean"
colnames(UPMC)[colnames(UPMC) == "AngMean"] = "UPMC_ES_AngryMean"
colnames(UPMC)[colnames(UPMC) == "SadMean"] = "UPMC_ES_SadMean"
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_ES_HappyMean","UO_ES_AngryMean", "UO_ES_SadMean")],UPMC[,c("UPMC_ES_HappyMean", "UPMC_ES_AngryMean", "UPMC_ES_SadMean")],Both_Site_Mean[,c("BothSite_ES_HappyMean", "BothSite_ES_AngryMean", "BothSite_ES_SadMean","n", "GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("Emotion Strategies Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
# Clean Environment
rm(Both_Site_Mean, Progress, Progress_Mean, Progress_Ang_Mean, Progress_Ang_Mean_Both, Progress_Hap_Mean, Progress_Hap_Mean_Both, Progress_Sad_Mean, Progress_Sad_Mean_Both, UO, UPMC, ID, Timepoint_names)
View(ES_PREP)
# Check NA percentage
ES_PREP$NACheck <- rowSums(is.na(select(ES_PREP, starts_with("oc_es"))))/ncol(dplyr::select(ES_PREP, starts_with("oc_es")))
# Drop people who are less than 67% & 100%
ES_DROP_67 <- ES_PREP[ES_PREP$NACheck > 0.67, ]
ES_PREP_67 <- ES_PREP[ES_PREP$NACheck <= 0.67, ]
ES_DROP_100 <- ES_PREP[ES_PREP$NACheck > 0, ]
ES_PREP_100 <- ES_PREP[ES_PREP$NACheck <= 0, ]
View(ES_DROP_67)
# Empty Global Environment
rm(list = ls())
#install.packages("flextable")
library(dplyr)
library(data.table)
library(knitr)
library(kableExtra)
library(tidyverse)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE, include = FALSE)
fsep <- .Platform$file.sep;
# Set the working directory ---------
# for Bryan
# setwd("C:/Users/bryan/Documents/GitHub/DataUploadAutomation/Measures/EmotionStrategies")
# setwd("D:/Austin/College (D-Drive)/DataUploadAutomation/Measures/EmotionStrategies")
#sentific notation, round up to 3 digits
options(digits = 3)
Pedigree <- read.csv("Reference_Pedigree.csv", stringsAsFactors = FALSE)
Redcap_Data <- read.csv("Redcap_Data.csv", stringsAsFactors = FALSE)
NDA_ES <- read.csv("ers01_template.csv", skip = 1, stringsAsFactors = FALSE)
# Not sure why this was in the code I was referencing but I'll keep it here jst in case.
#Pedigree <- read.csv("Reference_Pedigree.csv")
#Redcap_Data <- read.csv("Redcap_Data.csv")
#NDA_DCCS <- read.csv("dccs01_template.csv", skip=1)
# Redcap column names for locating old names to be replaced with Prep names and NDA names
new_ES_names <- c("oc_es_hapstrat", "oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3", "oc_es_angstrat", "oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3", "oc_es_sadstrat", "oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")
old_ES_names <- c("oc_es_hapstrat", "oc_es_h1", "oc_es_h2", "oc_es_h3", "oc_es_angstrat", "oc_es_a1", "oc_es_a2", "oc_es_a3", "oc_es_sadstrat", "oc_es_s1", "oc_es_s2", "oc_es_s3")
NDA_ES_names <- sprintf("es_%01d", 1:12)
# Replace Column Names
setnames(Redcap_Data, old_ES_names, new_ES_names)
# Assign timepoint base on redcap_event_name
Redcap_Data$timepoint = sapply(strsplit(as.character(Redcap_Data$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
# Select needed columns and rename in Redcap_Data
Redcap_Data <- select(Redcap_Data, c(Fam_ID = fam_id,  timepoint, starts_with("oc_es_")))
Redcap_Data <- select(Redcap_Data, -c(oc_es_notes, oc_es_hgen, oc_es_agen, oc_es_sgen, oc_es_intblue, oc_es_intgreen, oc_es_intmom))
# Previous attempt to remove in a more concise way. starts_with failed to remove indicated columns.
# Redcap_Data <- select(Redcap_Data, -c(oc_es_notes, oc_es_hgen, oc_es_agen, oc_es_sgen, starts_with("oc_es_int"))
# Select revelent pedigree information, rename as needed. (Include GroupAssignment for treatment progress calculation).
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#Exchange commas out of Prep Sheet to avoid CSV issues. Personal selection was a "/" but you can change it here to preference.
Redcap_Data <- sapply(Redcap_Data, gsub, pattern = ",", replacement= "/")
# Merge Predigree and redcap files
ES_PREP <- merge(Pedigree_Prep, Redcap_Data,by = c("timepoint","Fam_ID"), all = TRUE)
# Clean Environment
rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Redcap_Data)
# Set neccessary data to numeric so they can be used in calculations
ES_PREP[, c(10:12,14:16,18:20)] <- sapply(ES_PREP[, c(10:12,14:16,18:20)], as.numeric)
# Created calculated columns
ES_PREP <- add_column(ES_PREP, oc_es_hap_total = rowSums(ES_PREP[, c("oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3")]),.after = "oc_es_hap_3")
ES_PREP <- add_column(ES_PREP, oc_es_ang_total = rowSums(ES_PREP[, c("oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3")]),.after = "oc_es_ang_3")
ES_PREP <- add_column(ES_PREP, oc_es_sad_total = rowSums(ES_PREP[, c("oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")]),.after = "oc_es_sad_3")
# Create NDA prep sheet, select all the needed columns from prep sheet
NDA_ES_Prep <- select(ES_PREP, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_es_") ))
# Replace columns name
setnames(NDA_ES_Prep, new_ES_names, NDA_ES_names)
# Recreate first line in orignial NDA file
NDA_ES <- bind_rows(NDA_ES, NDA_ES_Prep)
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_ES))
first_line[,1] <- "ers"
# assign the second cell in first_line as 1
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called dccs.csv, and put first line into this file
# dccs.csv file will be saved into same folder as current r script
write.table(first_line, file = "ers01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in NDA_DCCS into dccs.cav file
write.table(NDA_ES, file = 'ers01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
#Clean Global Environment
rm(first_line, NDA_ES, NDA_ES_Prep, NDA_ES_names, new_ES_names, old_ES_names)
# PAUSED: RedCap data shouldn't have NAs in the same way as survey data.
# Check NA percentage
#ES_PREP$NACheck <- rowSums(is.na(select(ES_PREP, starts_with("oc_es"))))/ncol(dplyr::select(ES_PREP, starts_with("oc_es")))
# Drop people who are less than 67% & 100%
#ES_DROP_67 <- ES_PREP[ES_PREP$NACheck > 0.67, ]
#ES_PREP_67 <- ES_PREP[ES_PREP$NACheck <= 0.67, ]
#ES_DROP_100 <- ES_PREP[ES_PREP$NACheck > 0, ]
#ES_PREP_100 <- ES_PREP[ES_PREP$NACheck <= 0, ]
# Treatment Progress sheet
# Select needed column
Progress <- select(ES_PREP, c(Fam_ID, GroupAssignment, timepoint, oc_es_hap_total, oc_es_ang_total, oc_es_sad_total))
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Hap_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(HapMean = mean(oc_es_hap_total,na.rm = T),count = n())
Progress_Ang_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(AngMean = mean(oc_es_ang_total,na.rm = T),count = n())
Progress_Sad_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(SadMean = mean(oc_es_sad_total,na.rm = T),count = n())
# Join Happy, Angry, and Sad
Progress_Mean <- merge(Progress_Hap_Mean, Progress_Ang_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Sad_Mean)
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Mean
Progress_Hap_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_HappyMean" = mean(oc_es_hap_total,na.rm = T),n = n())
Progress_Ang_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_AngryMean" = mean(oc_es_ang_total,na.rm = T),n = n())
Progress_Sad_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_SadMean" = mean(oc_es_sad_total,na.rm = T),n = n())
Both_Site_Mean <- merge(Progress_Hap_Mean_Both, Progress_Ang_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Sad_Mean_Both)
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "HapMean"] = "UO_ES_HappyMean"
colnames(UO)[colnames(UO) == "AngMean"] = "UO_ES_AngryMean"
colnames(UO)[colnames(UO) == "SadMean"] = "UO_ES_SadMean"
colnames(UPMC)[colnames(UPMC) == "HapMean"] = "UPMC_ES_HappyMean"
colnames(UPMC)[colnames(UPMC) == "AngMean"] = "UPMC_ES_AngryMean"
colnames(UPMC)[colnames(UPMC) == "SadMean"] = "UPMC_ES_SadMean"
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_ES_HappyMean","UO_ES_AngryMean", "UO_ES_SadMean")],UPMC[,c("UPMC_ES_HappyMean", "UPMC_ES_AngryMean", "UPMC_ES_SadMean")],Both_Site_Mean[,c("BothSite_ES_HappyMean", "BothSite_ES_AngryMean", "BothSite_ES_SadMean","n", "GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("Emotion Strategies Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
# Clean Environment
rm(Both_Site_Mean, Progress, Progress_Mean, Progress_Ang_Mean, Progress_Ang_Mean_Both, Progress_Hap_Mean, Progress_Hap_Mean_Both, Progress_Sad_Mean, Progress_Sad_Mean_Both, UO, UPMC, ID, Timepoint_names)
# Empty Global Environment
rm(list = ls())
# Loading Library
library(dplyr)
library(data.table)
library(knitr)
library(kableExtra)
library(tidyverse)
# Settings for knit the whole document
# Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE, include = FALSE)
#sentific notation, round up to 3 digits
options(digits = 3)
# Import Pedigree and NDA Structure
Pedigree <- read.csv("Reference_Pedigree.csv")
NDA_CBCL <- read.csv("cbcl1_501_template.csv", skip = 1)
# Import UO and UMPC flies. Data is kept from being factors so later modifications will work.
UO_T1_CBCL <- read.csv(file = 'UO_T1_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T2_CBCL <- read.csv(file = 'UO_T2_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T3_CBCL <- read.csv(file = 'UO_T3_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T4_CBCL <- read.csv(file = 'UO_T4_Qualtrics.csv', stringsAsFactors = FALSE)
UPMC_T1_CBCL <- read.csv(file = 'UPMC_T1_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T2_CBCL <- read.csv(file = 'UPMC_T2_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T3_CBCL <- read.csv(file = 'UPMC_T3_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T4_CBCL <- read.csv(file = 'UPMC_T4_cbcl.csv', stringsAsFactors = FALSE)
# Create list of new variable names for the Prep Sheet
New_CBCL_Names <- sprintf("srm_cbcl_%03d", seq(1:100))
# Create list of old variable names so we can target them to be replaced with the new ones
# Since the question names change by timepoint we'll have to make unique lists by timepoint, starting with UO Timepoint 1 and UMPC Timepoint 1 and 4.
Old_UO_CBCL_Names_T1 <- sprintf("Q264_%01d", seq(1:100))
Old_UPMC_CBCL_Names_T1_T4 <- sprintf("Q15.1_%01d", seq(1:100))
# Old names for UO Timepoint 2, UMPC Timepoints 2 and 3
Old_UO_CBCL_Names_T2 <- sprintf("Q368_%01d", seq(1:100))
Old_UPMC_CBCL_Names_T2_T3 <- sprintf("Q12.1_%01d", seq(1:100))
# Old names for UO Timepoint 3
Old_UO_CBCL_Names_T3 <- sprintf("Q534_%01d", seq(1:100))
# Old names for UO timepoint 4
Old_UO_CBCL_Names_T4 <- sprintf("Q828_%01d", seq(1:100))
# Replace UO column names (there may be errors from the CBCL TEXT question responses)
setnames(UO_T1_CBCL, Old_UO_CBCL_Names_T1, New_CBCL_Names)
setnames(UO_T2_CBCL, Old_UO_CBCL_Names_T2, New_CBCL_Names)
setnames(UO_T3_CBCL, Old_UO_CBCL_Names_T3, New_CBCL_Names)
setnames(UO_T4_CBCL, Old_UO_CBCL_Names_T4, New_CBCL_Names)
# Replace UPMC column names (there may be errors from the CBCL TEXT question responses)
setnames(UPMC_T1_CBCL, Old_UPMC_CBCL_Names_T1_T4, New_CBCL_Names)
setnames(UPMC_T2_CBCL, Old_UPMC_CBCL_Names_T2_T3, New_CBCL_Names)
setnames(UPMC_T3_CBCL, Old_UPMC_CBCL_Names_T2_T3, New_CBCL_Names)
setnames(UPMC_T4_CBCL, Old_UPMC_CBCL_Names_T1_T4, New_CBCL_Names)
# Edit UO CBCL Time 1 - 4 to have only CBCL quesions and the FamID.
UO_T1_CBCL <- select(UO_T1_CBCL, c(FamID = Q221, contains("cbcl")))
UO_T2_CBCL <- select(UO_T2_CBCL, c(FamID = Q116, contains("cbcl")))
UO_T3_CBCL <- select(UO_T3_CBCL, c(FamID = Q174, contains("cbcl")))
UO_T4_CBCL <- select(UO_T4_CBCL, c(FamID = Q203, contains("cbcl")))
# Edit UPMC CBCL Time 1 - 4 to have only CBCL quesions and the FamID.
UPMC_T1_CBCL <- select(UPMC_T1_CBCL, c(FamID = Q1.2, contains("cbcl")))
UPMC_T2_CBCL <- select(UPMC_T2_CBCL, c(FamID = Q1.2, contains("cbcl")))
UPMC_T3_CBCL <- select(UPMC_T3_CBCL, c(FamID = Q1.2, contains("cbcl")))
UPMC_T4_CBCL <- select(UPMC_T4_CBCL, c(FamID = Q1.2, contains("cbcl")))
# Bind UO and UPMC CBCL Data By Timepoint
CBCL_T1 <- rbind(UO_T1_CBCL, UPMC_T1_CBCL)
CBCL_T2 <- rbind(UO_T2_CBCL, UPMC_T2_CBCL)
CBCL_T3 <- rbind(UO_T3_CBCL, UPMC_T3_CBCL)
CBCL_T4 <- rbind(UO_T4_CBCL, UPMC_T4_CBCL)
# Clean Global Enviorment
rm(UO_T1_CBCL, UO_T2_CBCL, UO_T3_CBCL, UO_T4_CBCL, UPMC_T1_CBCL, UPMC_T2_CBCL, UPMC_T3_CBCL, UPMC_T4_CBCL,
old_UO_CBCL_names_T1, old_UO_CBCL_names_T2, old_UO_CBCL_names_T3, old_UO_CBCL_names_T4, old_UPMC_CBCL_names_T1_T4, old_UPMC_CBCL_names_T2_T3)
# Create the Predigree data for each Timepoint
Pedigree_T1 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T1, interview_date = Time1Date, GroupAssignment)
Pedigree_T2 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T2, interview_date = Time2Date, GroupAssignment)
Pedigree_T3 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T3, interview_date = Time3Date, GroupAssignment)
Pedigree_T4 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T4, interview_date = Time4Date, GroupAssignment)
# Merge Pedigree data to CBCL Time Points
CBCL_T1 <- merge(Pedigree_T1, CBCL_T1, by = 'FamID')
CBCL_T2 <- merge(Pedigree_T2, CBCL_T2, by = 'FamID')
CBCL_T3 <- merge(Pedigree_T3, CBCL_T3, by = 'FamID')
CBCL_T4 <- merge(Pedigree_T4, CBCL_T4, by = 'FamID')
# Clean Global Enviorment
rm(Pedigree, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
# Create Time Point coloumn in each CBCL Sheet and populate the cell with time point
CBCL_T1$timepoint <- "Time 1"
CBCL_T2$timepoint <- "Time 2"
CBCL_T3$timepoint <- "Time 3"
CBCL_T4$timepoint <- "Time 4"
# Bind all cbcl Time Points together creating the CBCL Prep sheet
CBCL_Prep <- rbind(CBCL_T1, CBCL_T2, CBCL_T3, CBCL_T4)
# Clean Global Enviorment
rm(CBCL_T1, CBCL_T2, CBCL_T3, CBCL_T4)
# Recode text responses into numbers so they can be used in calculations
CBCL_Prep <- CBCL_Prep %>%
mutate_at(New_CBCL_Names,
funs(recode(., "Not True (as far as you know)" = 0,
"Somewhat or Sometimes True" = 1,
"Very True or Often True" = 2,.default = NaN)))
# Recode UPMC Group Assignment names to match UO Group Assignment names
CBCL_Prep <- CBCL_Prep %>%
mutate_at(c("GroupAssignment"),
funs(recode(., "Assigned Group 3 (HC)" = "Healthy",
'Assigned Group 2 (FSU)' = "NO DBT",
'Assigned Group 1 (DBT)' = "DBT")))
# Create calculated columns
# Creating calculated columns for "cbcl_er"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_er = rowSums(CBCL_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
# Creating calculated columns for "cbcl_ad"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_ad = rowSums(CBCL_Prep[, c("srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047", "srm_cbcl_068", "srm_cbcl_087",
"srm_cbcl_090")]),.after = "cbcl_er")
# Creating calculated columns for "cbcl_sc"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_sc = rowSums(CBCL_Prep[, c("srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019", "srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045",
"srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093")]),.after = "cbcl_ad")
# Creating calculated columns for "cbcl_w"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_w = rowSums(CBCL_Prep[, c("srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_100", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_sc")
# Creating calculated columns for "cbcl_sp"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_sp = rowSums(CBCL_Prep[, c("srm_cbcl_022", "srm_cbcl_038", "srm_cbcl_048", "srm_cbcl_064", "srm_cbcl_074",
"srm_cbcl_084")]),.after = "cbcl_w")
# Creating calculated columns for "cbcl_ap"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_ap = rowSums(CBCL_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059",
"srm_cbcl_095")]),.after = "cbcl_sp")
# Creating calculated columns for "cbcl_ab"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_ab = rowSums(CBCL_Prep[, c("srm_cbcl_008", "srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029",
"srm_cbcl_035", "srm_cbcl_040", "srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066",
"srm_cbcl_069", "srm_cbcl_081", "srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_ap")
# Creating calculated columns for "cbcl_op"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_op = rowSums(CBCL_Prep[, c("srm_cbcl_003", "srm_cbcl_009", "srm_cbcl_011", "srm_cbcl_013", "srm_cbcl_014", "srm_cbcl_017", "srm_cbcl_025",
"srm_cbcl_026", "srm_cbcl_028", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_034", "srm_cbcl_036",
"srm_cbcl_041", "srm_cbcl_049", "srm_cbcl_050", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_057", "srm_cbcl_060",
"srm_cbcl_061", "srm_cbcl_063", "srm_cbcl_065", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_075", "srm_cbcl_076",
"srm_cbcl_077", "srm_cbcl_080", "srm_cbcl_089", "srm_cbcl_091", "srm_cbcl_094")]),.after = "cbcl_ab")
# Creating calculated columns for "cbcl_int"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_int = rowSums(CBCL_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099", "srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047",
"srm_cbcl_068", "srm_cbcl_087", "srm_cbcl_090", "srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019",
"srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045", "srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093",
"srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_067", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_op")
# Creating calculated columns for "cbcl_ext"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_ext = rowSums(CBCL_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059", "srm_cbcl_095", "srm_cbcl_008", "srm_cbcl_015",
"srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029", "srm_cbcl_035", "srm_cbcl_040",
"srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066", "srm_cbcl_069", "srm_cbcl_081",
"srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_int")
# Creating calculated columns for "cbcl_total"
CBCL_Prep <- add_column(CBCL_Prep, cbcl_total = rowSums(CBCL_Prep[, c("srm_cbcl_001", "srm_cbcl_002", "srm_cbcl_003", "srm_cbcl_004", "srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_007",
"srm_cbcl_008", "srm_cbcl_009", "srm_cbcl_010", "srm_cbcl_011", "srm_cbcl_012", "srm_cbcl_013", "srm_cbcl_014",
"srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_017", "srm_cbcl_018", "srm_cbcl_019", "srm_cbcl_020", "srm_cbcl_021",
"srm_cbcl_022", "srm_cbcl_023", "srm_cbcl_024", "srm_cbcl_025", "srm_cbcl_026", "srm_cbcl_027", "srm_cbcl_028",
"srm_cbcl_029", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_033", "srm_cbcl_034", "srm_cbcl_035",
"srm_cbcl_036", "srm_cbcl_037", "srm_cbcl_038", "srm_cbcl_039", "srm_cbcl_040", "srm_cbcl_041", "srm_cbcl_042",
"srm_cbcl_043", "srm_cbcl_044", "srm_cbcl_045", "srm_cbcl_046", "srm_cbcl_047", "srm_cbcl_048", "srm_cbcl_049",
"srm_cbcl_050", "srm_cbcl_051", "srm_cbcl_052", "srm_cbcl_053", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_056",
"srm_cbcl_057", "srm_cbcl_058", "srm_cbcl_059", "srm_cbcl_060", "srm_cbcl_061", "srm_cbcl_062", "srm_cbcl_063",
"srm_cbcl_064", "srm_cbcl_065", "srm_cbcl_066", "srm_cbcl_067", "srm_cbcl_068", "srm_cbcl_069", "srm_cbcl_070",
"srm_cbcl_071", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_074", "srm_cbcl_075", "srm_cbcl_076", "srm_cbcl_077",
"srm_cbcl_078", "srm_cbcl_079", "srm_cbcl_080", "srm_cbcl_081", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_084",
"srm_cbcl_085", "srm_cbcl_086", "srm_cbcl_087", "srm_cbcl_088", "srm_cbcl_089", "srm_cbcl_090", "srm_cbcl_091",
"srm_cbcl_092", "srm_cbcl_093", "srm_cbcl_094", "srm_cbcl_095", "srm_cbcl_096", "srm_cbcl_097", "srm_cbcl_098",
"srm_cbcl_099")]),.after = "cbcl_ext")
# Create NDA prep sheet.
# Select all the needed columns from CBCL_Prep sheet
NDA_CBCL_Prep <- select(CBCL_Prep, c(subjectkey = child_guid, src_subject_id = child_FamID, sex = child_sex ,interview_age, interview_date, starts_with("srm")))
# Create NDA structure column names. They are unique and without a pattern so they must be made manually.
NDA_CBCL_Names <- paste(c("cbcl56a", "cbcl1", "cbcl_nt", "cbcl_eye", "cbcl8", "cbcl10", "cbcl_out", "cbcl_wait", "cbcl_chew", "cbcl11", "cbcl_help", "cbcl49", "cbcl14", "cbcl15", "cbcl_defiant", "cbcl_dem", "cbcl20",
"cbcl21", "cbcl_diar", "cbcl_disob", "cbcl_dist", "cbcl_alonsleep", "cbcl_answer", "cbcl24", "cbcl25", "cbcl_fun", "cbcl26", "cbcl_home", "cbcl_frust", "cbcl27", "cbcl_eat", "cbcl29", "cbcl_feel", "cbcl36",
"cbcl37", "cbcl_every", "cbcl_upset", "cbcl_troubsleep", "cbcl56b", "cbcl_hit", "cbcl_breath", "cbcl_hurt", "cbcl_unhap", "cbcl_angry", "cbcl56c", "cbcl46", "cbcl45", "cbcl47", "cbcl53", "cbcl54", "cbcl_panic",
"cbcl_bow", "cbcl57", "cbcl58", "cbcl60", "cbcl62", "cbcl56d", "cbcl_punish", "cbcl_shift", "cbcl56e", "cbcl_reat", "cbcl_play", "cbcl_rock", "cbcl_bed", "cbcl_toil", "cbcl68", "cbcl_aff", "cbcl71", "cbcl_selfish",
"cbcl_littleaf", "cbcl_inter", "cbcl_fear", "cbcl75", "cbcl76", "cbcl_smear", "cbcl79", "cbcl_stares", "cbcl56f", "cbcl_sad", "cbcl84", "cbcl86", "cbcl87", "cbcl88", "cbcl_crie", "cbcl95", "cbcl_clean", "cbcl50",
"cbcl_uncoop", "cbcl102", "cbcl103", "cbcl104", "cbcl_people", "cbcl56g", "cbcl_wake", "cbcl_wand", "cbcl19", "cbcl109", "cbcl_withdr", "cbcl112", "cbcl113a"))
# Change names in the NDA_CBCL_Prep to match the NDA structure column names.
setnames(NDA_CBCL_Prep, New_CBCL_Names, NDA_CBCL_Names)
# Make an empty row in the NDA sheet for compatibility (to avoid some potential errors).
NDA_CBCL[1,] <- NA
# Combine NDA CBCL Prep sheet with the NDA structure.
NDA_CBCL <- bind_rows(NDA_CBCL,NDA_CBCL_Prep)
# Recreate first line in orignial NDA file
# Make an empty row, with same number of column in NDA_CBCL, as first line of NDA sheet
# ncol(NDA_CBCL)  is number of columns in NDA_CBCL
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_CBCL))
# assign the first cell in first_line as cbcl1_5 which is the first cell in orignial NDA structure
first_line[,1] <- "cbcl1_5"
# assign the second cell in first_line as "1"
first_line[,2] <- "1"
# Create a new file in folder called cbcl1_5.csv, and put first line into this file
# cbcl1_5.csv file will be saved into same folder as this current r script
write.table(first_line, file = "cbcl1_5.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in NDA_CBCL into cbcl1_5.csv file
write.table(NDA_CBCL, file = 'cbcl1_5.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
# Select needed columns
Progress <- select(CBCL_Prep, c(FamID, GroupAssignment, timepoint, cbcl_ext, cbcl_int, cbcl_total, starts_with("srm")))
# Change FamId as character and assign it to the ID variable
ID <- c(as.character(Progress$FamID))
# Add "Site" column to Progress, if an ID start with 9 then the site is UO, otherwise it is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
# Grouping & calculation for CBCL total
Progress_Total_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(cbcl_total,na.rm = T),count = n())
# Grouping & calculation for CBCL Int
Progress_Int_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(IntMean = mean(cbcl_int,na.rm = T),count = n())
# Grouping & calculation for CBCL Ext
Progress_Ext_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(ExtMean = mean(cbcl_ext,na.rm = T),count = n())
# Merge Total, Int, and Ext calculations
Progress_Mean <- merge(Progress_Int_Mean, Progress_Ext_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Total_Mean)
# Select only UO Mean to have UO data separate
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean to have UMPC data separate
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate both site mean between UO and UMPC
# Grouping & calculation for CBCL total
Progress_Total_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_CBCL_TotalMean" = mean(cbcl_total,na.rm = T),n = n())
# Grouping & calculation for CBCL Int
Progress_Int_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_CBCL_IntMean" = mean(cbcl_int,na.rm = T),n = n())
# Grouping & calculation for CBCL Ext
Progress_Ext_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_CBCL_ExtMean" = mean(cbcl_ext,na.rm = T),n = n())
# Merge both site Total, Int, and Ext calculations
Both_Site_Mean <- merge(Progress_Int_Mean_Both, Progress_Ext_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Total_Mean_Both)
# Change GroupMean Column names according to site and subscale
colnames(UO)[colnames(UO) == "TotalMean"] = "UO_CBCL_TotalMean"
colnames(UO)[colnames(UO) == "IntMean"] = "UO_CBCL_IntMean"
colnames(UO)[colnames(UO) == "ExtMean"] = "UO_CBCL_ExtMean"
colnames(UPMC)[colnames(UPMC) == "TotalMean"] = "UPMC_CBCL_TotalMean"
colnames(UPMC)[colnames(UPMC) == "IntMean"] = "UPMC_CBCL_IntMean"
colnames(UPMC)[colnames(UPMC) == "ExtMean"] = "UPMC_CBCL_ExtMean"
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_CBCL_TotalMean","UO_CBCL_IntMean", "UO_CBCL_ExtMean")],UPMC[,c("UPMC_CBCL_TotalMean", "UPMC_CBCL_IntMean", "UPMC_CBCL_ExtMean")],Both_Site_Mean[,c("BothSite_CBCL_TotalMean", "BothSite_CBCL_IntMean", "BothSite_CBCL_ExtMean","n", "GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint columns
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column names
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("CBCL Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
# Clean Environment of intermediate calculations for all data table.
rm(Progress, Progress_Ext_Mean, Progress_Ext_Mean_Both, Progress_Int_Mean, Progress_Int_Mean_Both, Progress_Mean, Progress_Total_Mean, Progress_Total_Mean_Both, Both_Site_Mean)
View(NDA_CBCL)
View(NDA_CBCL_Prep)
rm(NDA_CBCL_Prep, NDA_CBCL_Names, UO, UPMC)
#Clean environment of intermediate calculations for NDA structure
rm(NDA_CBCL_Prep, NDA_CBCL_Names, UO, UPMC, first_line)
View(Mean_Table)
