#Same as above for different timepoints
old_UO_cbcl_names_T2 <- sprintf("Q368_%01d", seq(1:100))
old_UPMC_cbcl_names_T2_T3 <- sprintf("Q12.1_%01d", seq(1:100))
#Same as above but UO has a different question number to select for each timepoint
old_UO_cbcl_names_T3 <- sprintf("Q534_%01d", seq(1:100))
#Same as above for UO timepoint 4
old_UO_cbcl_names_T4 <- sprintf("Q828_%01d", seq(1:100))
# Replace UO column names (there may be errors from the CBCL TEXT question responses)
setnames(UO_T1_cbcl, old_UO_cbcl_names_T1, new_cbcl_names)
setnames(UO_T2_cbcl, old_UO_cbcl_names_T2, new_cbcl_names)
setnames(UO_T3_cbcl, old_UO_cbcl_names_T3, new_cbcl_names)
setnames(UO_T4_cbcl, old_UO_cbcl_names_T4, new_cbcl_names)
# Replace UPMC column names (there may be errors from the CBCL TEXT question responses)
setnames(UPMC_T1_cbcl, old_UPMC_cbcl_names_T1_T4, new_cbcl_names)
setnames(UPMC_T2_cbcl, old_UPMC_cbcl_names_T2_T3, new_cbcl_names)
setnames(UPMC_T3_cbcl, old_UPMC_cbcl_names_T2_T3, new_cbcl_names)
setnames(UPMC_T4_cbcl, old_UPMC_cbcl_names_T1_T4, new_cbcl_names)
# Edit UO cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UO_T1_cbcl <- select(UO_T1_cbcl, c(FamID = Q221, contains("cbcl")))
UO_T2_cbcl <- select(UO_T2_cbcl, c(FamID = Q116, contains("cbcl")))
UO_T3_cbcl <- select(UO_T3_cbcl, c(FamID = Q174, contains("cbcl")))
UO_T4_cbcl <- select(UO_T4_cbcl, c(FamID = Q203, contains("cbcl")))
# Edit UPMC cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UPMC_T1_cbcl <- select(UPMC_T1_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T2_cbcl <- select(UPMC_T2_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T3_cbcl <- select(UPMC_T3_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T4_cbcl <- select(UPMC_T4_cbcl, c(FamID = Q1.2, contains("cbcl")))
# Bind UO and UPMC cbcl Data By Time Point
cbcl_T1 <- rbind(UO_T1_cbcl, UPMC_T1_cbcl)
cbcl_T2 <- rbind(UO_T2_cbcl, UPMC_T2_cbcl)
cbcl_T3 <- rbind(UO_T3_cbcl, UPMC_T3_cbcl)
cbcl_T4 <- rbind(UO_T4_cbcl, UPMC_T4_cbcl)
# Clean Global Enviorment
rm(UO_T1_cbcl, UO_T2_cbcl, UO_T3_cbcl, UO_T4_cbcl, UPMC_T1_cbcl, UPMC_T2_cbcl, UPMC_T3_cbcl, UPMC_T4_cbcl,
old_UO_cbcl_names_T1, old_UO_cbcl_names_T2, old_UO_cbcl_names_T3, old_UO_cbcl_names_T4, old_UPMC_cbcl_names_T1_T4, old_UPMC_cbcl_names_T2_T3)
# Create the Predigree data for each Time Point
# Resolve issue with relationship column
Pedigree_T1 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T1, interview_date = Time1Date, GroupAssignment)
Pedigree_T2 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T2, interview_date = Time2Date, GroupAssignment)
Pedigree_T3 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T3, interview_date = Time3Date, GroupAssignment)
Pedigree_T4 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T4, interview_date = Time4Date, GroupAssignment)
# Merge Pedigree data to cbcl Time Points
cbcl_T1 <- merge(Pedigree_T1, cbcl_T1, by = 'FamID')
cbcl_T2 <- merge(Pedigree_T2, cbcl_T2, by = 'FamID')
cbcl_T3 <- merge(Pedigree_T3, cbcl_T3, by = 'FamID')
cbcl_T4 <- merge(Pedigree_T4, cbcl_T4, by = 'FamID')
# Clean Global Enviorment
rm(Pedigree, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
# Create Time Point coloumn in each cbcl Sheet and populate the cell with time point
cbcl_T1$timepoint <- "Time 1"
cbcl_T2$timepoint <- "Time 2"
cbcl_T3$timepoint <- "Time 3"
cbcl_T4$timepoint <- "Time 4"
# Rename each of the cbcl Date and Age coloumns so they match
#cbcl_T1 <- cbcl_T1 %>% rename( interview_date = Time1Date, interview_age = MomAge_T1)
#cbcl_T2 <- cbcl_T2 %>% rename( interview_date = Time2Date, interview_age = MomAge_T2)
#cbcl_T3 <- cbcl_T3 %>% rename( interview_date = Time3Date, interview_age = MomAge_T3)
#cbcl_T4 <- cbcl_T4 %>% rename( interview_date = Time4Date, interview_age = MomAge_T4)
# Bind all cbcl Time Points togeather creating the cbcl_Prep sheet
cbcl_Prep <- rbind(cbcl_T1, cbcl_T2, cbcl_T3, cbcl_T4)
# Clean Global Enviorment
rm(cbcl_T1, cbcl_T2, cbcl_T3, cbcl_T4)
# Recode responses into numbers
cbcl_Prep <- cbcl_Prep %>%
mutate_at(new_cbcl_names,
funs(recode(., "Not True (as far as you know)" = 0,
"Somewhat or Sometimes True" = 1,
"Very True or Often True" = 2,.default = NaN)))
# Recode UPMC GroupAsignment name
cbcl_Prep <- cbcl_Prep %>%
mutate_at(c("GroupAssignment"),
funs(recode(., "Assigned Group 3 (HC)" = "Healthy",
'Assigned Group 2 (FSU)' = "NO DBT",
'Assigned Group 1 (DBT)' = "DBT")))
# Created calculated columns
cbcl_Prep <- add_column(cbcl_Prep, cbcl_er = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ad = rowSums(cbcl_Prep[, c("srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047", "srm_cbcl_068", "srm_cbcl_087",
"srm_cbcl_090")]),.after = "cbcl_er")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_sc = rowSums(cbcl_Prep[, c("srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019", "srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045",
"srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093")]),.after = "cbcl_ad")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_w = rowSums(cbcl_Prep[, c("srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_100", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_sc")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_sp = rowSums(cbcl_Prep[, c("srm_cbcl_022", "srm_cbcl_038", "srm_cbcl_048", "srm_cbcl_064", "srm_cbcl_074",
"srm_cbcl_084")]),.after = "cbcl_w")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ap = rowSums(cbcl_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059",
"srm_cbcl_095")]),.after = "cbcl_sp")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ab = rowSums(cbcl_Prep[, c("srm_cbcl_008", "srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029",
"srm_cbcl_035", "srm_cbcl_040", "srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066",
"srm_cbcl_069", "srm_cbcl_081", "srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_ap")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_op = rowSums(cbcl_Prep[, c("srm_cbcl_003", "srm_cbcl_009", "srm_cbcl_011", "srm_cbcl_013", "srm_cbcl_014", "srm_cbcl_017", "srm_cbcl_025",
"srm_cbcl_026", "srm_cbcl_028", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_034", "srm_cbcl_036",
"srm_cbcl_041", "srm_cbcl_049", "srm_cbcl_050", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_057", "srm_cbcl_060",
"srm_cbcl_061", "srm_cbcl_063", "srm_cbcl_065", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_075", "srm_cbcl_076",
"srm_cbcl_077", "srm_cbcl_080", "srm_cbcl_089", "srm_cbcl_091", "srm_cbcl_094")]),.after = "cbcl_ab")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_int = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099", "srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047",
"srm_cbcl_068", "srm_cbcl_087", "srm_cbcl_090", "srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019",
"srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045", "srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093",
"srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_067", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_op")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ext = rowSums(cbcl_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059", "srm_cbcl_095", "srm_cbcl_008", "srm_cbcl_015",
"srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029", "srm_cbcl_035", "srm_cbcl_040",
"srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066", "srm_cbcl_069", "srm_cbcl_081",
"srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_int")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_total = rowSums(cbcl_Prep[, c("srm_cbcl_001", "srm_cbcl_002", "srm_cbcl_003", "srm_cbcl_004", "srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_007",
"srm_cbcl_008", "srm_cbcl_009", "srm_cbcl_010", "srm_cbcl_011", "srm_cbcl_012", "srm_cbcl_013", "srm_cbcl_014",
"srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_017", "srm_cbcl_018", "srm_cbcl_019", "srm_cbcl_020", "srm_cbcl_021",
"srm_cbcl_022", "srm_cbcl_023", "srm_cbcl_024", "srm_cbcl_025", "srm_cbcl_026", "srm_cbcl_027", "srm_cbcl_028",
"srm_cbcl_029", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_033", "srm_cbcl_034", "srm_cbcl_035",
"srm_cbcl_036", "srm_cbcl_037", "srm_cbcl_038", "srm_cbcl_039", "srm_cbcl_040", "srm_cbcl_041", "srm_cbcl_042",
"srm_cbcl_043", "srm_cbcl_044", "srm_cbcl_045", "srm_cbcl_046", "srm_cbcl_047", "srm_cbcl_048", "srm_cbcl_049",
"srm_cbcl_050", "srm_cbcl_051", "srm_cbcl_052", "srm_cbcl_053", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_056",
"srm_cbcl_057", "srm_cbcl_058", "srm_cbcl_059", "srm_cbcl_060", "srm_cbcl_061", "srm_cbcl_062", "srm_cbcl_063",
"srm_cbcl_064", "srm_cbcl_065", "srm_cbcl_066", "srm_cbcl_067", "srm_cbcl_068", "srm_cbcl_069", "srm_cbcl_070",
"srm_cbcl_071", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_074", "srm_cbcl_075", "srm_cbcl_076", "srm_cbcl_077",
"srm_cbcl_078", "srm_cbcl_079", "srm_cbcl_080", "srm_cbcl_081", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_084",
"srm_cbcl_085", "srm_cbcl_086", "srm_cbcl_087", "srm_cbcl_088", "srm_cbcl_089", "srm_cbcl_090", "srm_cbcl_091",
"srm_cbcl_092", "srm_cbcl_093", "srm_cbcl_094", "srm_cbcl_095", "srm_cbcl_096", "srm_cbcl_097", "srm_cbcl_098",
"srm_cbcl_099")]),.after = "cbcl_ext")
# Experiment to condense the code. cbcl total all starts with srm_cbcl_0 but I can't seem to make it work.
# cbcl_Prep <- add_column(cbcl_Prep, cbcl_total_experiment = rowSums(cbcl_Prep, starts_with("srm_cbcl_0")),.after = "cbcl_ext")
# Check NA percentage
cbcl_Prep$NACheck <- rowSums(is.na(select(cbcl_Prep, starts_with("srm"))))/ncol(dplyr::select(cbcl_Prep, starts_with("srm")))
# Drop people who are less than 67% & 100%
cbcl_Drop_67 <- cbcl_Prep[cbcl_Prep$NACheck > 0.67, ]
cbcl_Prep_67 <- cbcl_Prep[cbcl_Prep$NACheck <= 0.67, ]
cbcl_Drop_100 <- cbcl_Prep[cbcl_Prep$NACheck > 0, ]
cbcl_Prep_100 <- cbcl_Prep[cbcl_Prep$NACheck <= 0, ]
# Drop people who are less than 67% & 100%
cbcl_Drop_67 <- cbcl_Prep[cbcl_Prep$NACheck > 0.33, ]
cbcl_Prep_67 <- cbcl_Prep[cbcl_Prep$NACheck <= 0.33, ]
View(cbcl_Drop_67)
# Drop people who are less than 67% & 100%
cbcl_Drop_67 <- cbcl_Prep[cbcl_Prep$NACheck > 0.66, ]
cbcl_Prep_67 <- cbcl_Prep[cbcl_Prep$NACheck <= 0.66, ]
View(cbcl_Drop_100)
#empty Global Environment
rm(list = ls())
# Import Packages Needed
library(dplyr)
library(data.table)
library(knitr)
library(kableExtra)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE, include = FALSE)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
fsep <- .Platform$file.sep;
# Set the working directory -----
# for Bryan
# setwd("C:/Users/bryan/Documents/GitHub/DataUploadAutomation/Measures/CBCL")
setwd("D:/Austin/College (D-Drive)/DataUploadAutomation/Measures/CBCL")
#sentific notation, round up to 3 digits
options(digits = 3)
# Import Pedigree and NDA Structure
Pedigree <- read.csv("Reference_Pedigree.csv")
NDA_CBCL <- read.csv("cbcl1_501_template.csv", skip = 1)
# Import cbcl Files
UO_T1_cbcl <- read.csv(file = 'UO_T1_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T2_cbcl <- read.csv(file = 'UO_T2_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T3_cbcl <- read.csv(file = 'UO_T3_Qualtrics.csv', stringsAsFactors = FALSE)
UO_T4_cbcl <- read.csv(file = 'UO_T4_Qualtrics.csv', stringsAsFactors = FALSE)
UPMC_T1_cbcl <- read.csv(file = 'UPMC_T1_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T2_cbcl <- read.csv(file = 'UPMC_T2_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T3_cbcl <- read.csv(file = 'UPMC_T3_cbcl.csv', stringsAsFactors = FALSE)
UPMC_T4_cbcl <- read.csv(file = 'UPMC_T4_cbcl.csv', stringsAsFactors = FALSE)
# Create list of new variable names
new_cbcl_names <- sprintf("srm_cbcl_%03d", seq(1:100))
# Create list of old variable names so we can replace them with the new ones
# Since the question names change by timepoint we'll have to make unique lists by timepoint.
old_UO_cbcl_names_T1 <- sprintf("Q264_%01d", seq(1:100))
old_UPMC_cbcl_names_T1_T4 <- sprintf("Q15.1_%01d", seq(1:100))
#Same as above for different timepoints
old_UO_cbcl_names_T2 <- sprintf("Q368_%01d", seq(1:100))
old_UPMC_cbcl_names_T2_T3 <- sprintf("Q12.1_%01d", seq(1:100))
#Same as above but UO has a different question number to select for each timepoint
old_UO_cbcl_names_T3 <- sprintf("Q534_%01d", seq(1:100))
#Same as above for UO timepoint 4
old_UO_cbcl_names_T4 <- sprintf("Q828_%01d", seq(1:100))
# Replace UO column names (there may be errors from the CBCL TEXT question responses)
setnames(UO_T1_cbcl, old_UO_cbcl_names_T1, new_cbcl_names)
setnames(UO_T2_cbcl, old_UO_cbcl_names_T2, new_cbcl_names)
setnames(UO_T3_cbcl, old_UO_cbcl_names_T3, new_cbcl_names)
setnames(UO_T4_cbcl, old_UO_cbcl_names_T4, new_cbcl_names)
# Replace UPMC column names (there may be errors from the CBCL TEXT question responses)
setnames(UPMC_T1_cbcl, old_UPMC_cbcl_names_T1_T4, new_cbcl_names)
setnames(UPMC_T2_cbcl, old_UPMC_cbcl_names_T2_T3, new_cbcl_names)
setnames(UPMC_T3_cbcl, old_UPMC_cbcl_names_T2_T3, new_cbcl_names)
setnames(UPMC_T4_cbcl, old_UPMC_cbcl_names_T1_T4, new_cbcl_names)
# Edit UO cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UO_T1_cbcl <- select(UO_T1_cbcl, c(FamID = Q221, contains("cbcl")))
UO_T2_cbcl <- select(UO_T2_cbcl, c(FamID = Q116, contains("cbcl")))
UO_T3_cbcl <- select(UO_T3_cbcl, c(FamID = Q174, contains("cbcl")))
UO_T4_cbcl <- select(UO_T4_cbcl, c(FamID = Q203, contains("cbcl")))
# Edit UPMC cbcl Time 1 - 4 to have only cbcl quesions and the FamID.
UPMC_T1_cbcl <- select(UPMC_T1_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T2_cbcl <- select(UPMC_T2_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T3_cbcl <- select(UPMC_T3_cbcl, c(FamID = Q1.2, contains("cbcl")))
UPMC_T4_cbcl <- select(UPMC_T4_cbcl, c(FamID = Q1.2, contains("cbcl")))
# Bind UO and UPMC cbcl Data By Time Point
cbcl_T1 <- rbind(UO_T1_cbcl, UPMC_T1_cbcl)
cbcl_T2 <- rbind(UO_T2_cbcl, UPMC_T2_cbcl)
cbcl_T3 <- rbind(UO_T3_cbcl, UPMC_T3_cbcl)
cbcl_T4 <- rbind(UO_T4_cbcl, UPMC_T4_cbcl)
# Clean Global Enviorment
rm(UO_T1_cbcl, UO_T2_cbcl, UO_T3_cbcl, UO_T4_cbcl, UPMC_T1_cbcl, UPMC_T2_cbcl, UPMC_T3_cbcl, UPMC_T4_cbcl,
old_UO_cbcl_names_T1, old_UO_cbcl_names_T2, old_UO_cbcl_names_T3, old_UO_cbcl_names_T4, old_UPMC_cbcl_names_T1_T4, old_UPMC_cbcl_names_T2_T3)
# Create the Predigree data for each Time Point
# Resolve issue with relationship column
Pedigree_T1 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T1, interview_date = Time1Date, GroupAssignment)
Pedigree_T2 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T2, interview_date = Time2Date, GroupAssignment)
Pedigree_T3 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T3, interview_date = Time3Date, GroupAssignment)
Pedigree_T4 <- select(Pedigree, FamID, child_guid, child_FamID = FamID_Child, child_sex = ChildGender, interview_age = ChildAge_T4, interview_date = Time4Date, GroupAssignment)
# Merge Pedigree data to cbcl Time Points
cbcl_T1 <- merge(Pedigree_T1, cbcl_T1, by = 'FamID')
cbcl_T2 <- merge(Pedigree_T2, cbcl_T2, by = 'FamID')
cbcl_T3 <- merge(Pedigree_T3, cbcl_T3, by = 'FamID')
cbcl_T4 <- merge(Pedigree_T4, cbcl_T4, by = 'FamID')
# Clean Global Enviorment
rm(Pedigree, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
# Create Time Point coloumn in each cbcl Sheet and populate the cell with time point
cbcl_T1$timepoint <- "Time 1"
cbcl_T2$timepoint <- "Time 2"
cbcl_T3$timepoint <- "Time 3"
cbcl_T4$timepoint <- "Time 4"
# Rename each of the cbcl Date and Age coloumns so they match
#cbcl_T1 <- cbcl_T1 %>% rename( interview_date = Time1Date, interview_age = MomAge_T1)
#cbcl_T2 <- cbcl_T2 %>% rename( interview_date = Time2Date, interview_age = MomAge_T2)
#cbcl_T3 <- cbcl_T3 %>% rename( interview_date = Time3Date, interview_age = MomAge_T3)
#cbcl_T4 <- cbcl_T4 %>% rename( interview_date = Time4Date, interview_age = MomAge_T4)
# Bind all cbcl Time Points togeather creating the cbcl_Prep sheet
cbcl_Prep <- rbind(cbcl_T1, cbcl_T2, cbcl_T3, cbcl_T4)
# Clean Global Enviorment
rm(cbcl_T1, cbcl_T2, cbcl_T3, cbcl_T4)
# Recode responses into numbers
cbcl_Prep <- cbcl_Prep %>%
mutate_at(new_cbcl_names,
funs(recode(., "Not True (as far as you know)" = 0,
"Somewhat or Sometimes True" = 1,
"Very True or Often True" = 2,.default = NaN)))
# Recode UPMC GroupAsignment name
cbcl_Prep <- cbcl_Prep %>%
mutate_at(c("GroupAssignment"),
funs(recode(., "Assigned Group 3 (HC)" = "Healthy",
'Assigned Group 2 (FSU)' = "NO DBT",
'Assigned Group 1 (DBT)' = "DBT")))
# Created calculated columns
cbcl_Prep <- add_column(cbcl_Prep, cbcl_er = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099")]),.after = "srm_cbcl_100")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ad = rowSums(cbcl_Prep[, c("srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047", "srm_cbcl_068", "srm_cbcl_087",
"srm_cbcl_090")]),.after = "cbcl_er")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_sc = rowSums(cbcl_Prep[, c("srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019", "srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045",
"srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093")]),.after = "cbcl_ad")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_w = rowSums(cbcl_Prep[, c("srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_100", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_sc")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_sp = rowSums(cbcl_Prep[, c("srm_cbcl_022", "srm_cbcl_038", "srm_cbcl_048", "srm_cbcl_064", "srm_cbcl_074",
"srm_cbcl_084")]),.after = "cbcl_w")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ap = rowSums(cbcl_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059",
"srm_cbcl_095")]),.after = "cbcl_sp")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ab = rowSums(cbcl_Prep[, c("srm_cbcl_008", "srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029",
"srm_cbcl_035", "srm_cbcl_040", "srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066",
"srm_cbcl_069", "srm_cbcl_081", "srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_ap")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_op = rowSums(cbcl_Prep[, c("srm_cbcl_003", "srm_cbcl_009", "srm_cbcl_011", "srm_cbcl_013", "srm_cbcl_014", "srm_cbcl_017", "srm_cbcl_025",
"srm_cbcl_026", "srm_cbcl_028", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_034", "srm_cbcl_036",
"srm_cbcl_041", "srm_cbcl_049", "srm_cbcl_050", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_057", "srm_cbcl_060",
"srm_cbcl_061", "srm_cbcl_063", "srm_cbcl_065", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_075", "srm_cbcl_076",
"srm_cbcl_077", "srm_cbcl_080", "srm_cbcl_089", "srm_cbcl_091", "srm_cbcl_094")]),.after = "cbcl_ab")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_int = rowSums(cbcl_Prep[, c("srm_cbcl_021", "srm_cbcl_046", "srm_cbcl_051", "srm_cbcl_079", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_092",
"srm_cbcl_097", "srm_cbcl_099", "srm_cbcl_010", "srm_cbcl_033", "srm_cbcl_037", "srm_cbcl_043", "srm_cbcl_047",
"srm_cbcl_068", "srm_cbcl_087", "srm_cbcl_090", "srm_cbcl_001", "srm_cbcl_007", "srm_cbcl_012", "srm_cbcl_019",
"srm_cbcl_024", "srm_cbcl_039", "srm_cbcl_045", "srm_cbcl_052", "srm_cbcl_078", "srm_cbcl_086", "srm_cbcl_093",
"srm_cbcl_002", "srm_cbcl_004", "srm_cbcl_023", "srm_cbcl_062", "srm_cbcl_067", "srm_cbcl_070", "srm_cbcl_071",
"srm_cbcl_098")]),.after = "cbcl_op")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_ext = rowSums(cbcl_Prep[, c("srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_056", "srm_cbcl_059", "srm_cbcl_095", "srm_cbcl_008", "srm_cbcl_015",
"srm_cbcl_016", "srm_cbcl_018", "srm_cbcl_020", "srm_cbcl_027", "srm_cbcl_029", "srm_cbcl_035", "srm_cbcl_040",
"srm_cbcl_042", "srm_cbcl_044", "srm_cbcl_053", "srm_cbcl_058", "srm_cbcl_066", "srm_cbcl_069", "srm_cbcl_081",
"srm_cbcl_085", "srm_cbcl_088", "srm_cbcl_096")]),.after = "cbcl_int")
cbcl_Prep <- add_column(cbcl_Prep, cbcl_total = rowSums(cbcl_Prep[, c("srm_cbcl_001", "srm_cbcl_002", "srm_cbcl_003", "srm_cbcl_004", "srm_cbcl_005", "srm_cbcl_006", "srm_cbcl_007",
"srm_cbcl_008", "srm_cbcl_009", "srm_cbcl_010", "srm_cbcl_011", "srm_cbcl_012", "srm_cbcl_013", "srm_cbcl_014",
"srm_cbcl_015", "srm_cbcl_016", "srm_cbcl_017", "srm_cbcl_018", "srm_cbcl_019", "srm_cbcl_020", "srm_cbcl_021",
"srm_cbcl_022", "srm_cbcl_023", "srm_cbcl_024", "srm_cbcl_025", "srm_cbcl_026", "srm_cbcl_027", "srm_cbcl_028",
"srm_cbcl_029", "srm_cbcl_030", "srm_cbcl_031", "srm_cbcl_032", "srm_cbcl_033", "srm_cbcl_034", "srm_cbcl_035",
"srm_cbcl_036", "srm_cbcl_037", "srm_cbcl_038", "srm_cbcl_039", "srm_cbcl_040", "srm_cbcl_041", "srm_cbcl_042",
"srm_cbcl_043", "srm_cbcl_044", "srm_cbcl_045", "srm_cbcl_046", "srm_cbcl_047", "srm_cbcl_048", "srm_cbcl_049",
"srm_cbcl_050", "srm_cbcl_051", "srm_cbcl_052", "srm_cbcl_053", "srm_cbcl_054", "srm_cbcl_055", "srm_cbcl_056",
"srm_cbcl_057", "srm_cbcl_058", "srm_cbcl_059", "srm_cbcl_060", "srm_cbcl_061", "srm_cbcl_062", "srm_cbcl_063",
"srm_cbcl_064", "srm_cbcl_065", "srm_cbcl_066", "srm_cbcl_067", "srm_cbcl_068", "srm_cbcl_069", "srm_cbcl_070",
"srm_cbcl_071", "srm_cbcl_072", "srm_cbcl_073", "srm_cbcl_074", "srm_cbcl_075", "srm_cbcl_076", "srm_cbcl_077",
"srm_cbcl_078", "srm_cbcl_079", "srm_cbcl_080", "srm_cbcl_081", "srm_cbcl_082", "srm_cbcl_083", "srm_cbcl_084",
"srm_cbcl_085", "srm_cbcl_086", "srm_cbcl_087", "srm_cbcl_088", "srm_cbcl_089", "srm_cbcl_090", "srm_cbcl_091",
"srm_cbcl_092", "srm_cbcl_093", "srm_cbcl_094", "srm_cbcl_095", "srm_cbcl_096", "srm_cbcl_097", "srm_cbcl_098",
"srm_cbcl_099")]),.after = "cbcl_ext")
# Experiment to condense the code. cbcl total all starts with srm_cbcl_0 but I can't seem to make it work.
# cbcl_Prep <- add_column(cbcl_Prep, cbcl_total_experiment = rowSums(cbcl_Prep, starts_with("srm_cbcl_0")),.after = "cbcl_ext")
# Check NA percentage
cbcl_Prep$NACheck <- rowSums(is.na(select(cbcl_Prep, starts_with("srm"))))/ncol(dplyr::select(cbcl_Prep, starts_with("srm")))
# Drop people who are less than 67% & 100%
cbcl_Drop_67 <- cbcl_Prep[cbcl_Prep$NACheck > 0.67, ]
cbcl_Prep_67 <- cbcl_Prep[cbcl_Prep$NACheck <= 0.67, ]
cbcl_Drop_100 <- cbcl_Prep[cbcl_Prep$NACheck > 0, ]
cbcl_Prep_100 <- cbcl_Prep[cbcl_Prep$NACheck <= 0, ]
View(cbcl_Drop_67)
rm(list = ls())
# Empty Global Environment
rm(list = ls())
#install.packages("flextable")
library(dplyr)
library(data.table)
library(knitr)
library(kableExtra)
library(tidyverse)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE, include = FALSE)
fsep <- .Platform$file.sep;
# Set the working directory ---------
# for Bryan
# setwd("C:/Users/bryan/Documents/GitHub/DataUploadAutomation/Measures/EmotionStrategies")
# setwd("D:/Austin/College (D-Drive)/DataUploadAutomation/Measures/EmotionStrategies")
#sentific notation, round up to 3 digits
options(digits = 3)
Pedigree <- read.csv("Reference_Pedigree.csv", stringsAsFactors = FALSE)
Redcap_Data <- read.csv("Redcap_Data.csv", stringsAsFactors = FALSE)
NDA_ES <- read.csv("ers01_template.csv", skip = 1, stringsAsFactors = FALSE)
# Not sure why this was in the code I was referencing but I'll keep it here jst in case.
#Pedigree <- read.csv("Reference_Pedigree.csv")
#Redcap_Data <- read.csv("Redcap_Data.csv")
#NDA_DCCS <- read.csv("dccs01_template.csv", skip=1)
# Redcap column names for locating old names to be replaced with Prep names and NDA names
new_ES_names <- c("oc_es_hapstrat", "oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3", "oc_es_angstrat", "oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3", "oc_es_sadstrat", "oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")
old_ES_names <- c("oc_es_hapstrat", "oc_es_h1", "oc_es_h2", "oc_es_h3", "oc_es_angstrat", "oc_es_a1", "oc_es_a2", "oc_es_a3", "oc_es_sadstrat", "oc_es_s1", "oc_es_s2", "oc_es_s3")
NDA_ES_names <- sprintf("es_%01d", 1:12)
# Replace Column Names
setnames(Redcap_Data, old_ES_names, new_ES_names)
# Assign timepoint base on redcap_event_name
Redcap_Data$timepoint = sapply(strsplit(as.character(Redcap_Data$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
# Select needed columns and rename in Redcap_Data
Redcap_Data <- select(Redcap_Data, c(Fam_ID = fam_id,  timepoint, starts_with("oc_es_")))
Redcap_Data <- select(Redcap_Data, -c(oc_es_notes, oc_es_hgen, oc_es_agen, oc_es_sgen, oc_es_intblue, oc_es_intgreen, oc_es_intmom))
# Previous attempt to remove in a more concise way. starts_with failed to remove indicated columns.
# Redcap_Data <- select(Redcap_Data, -c(oc_es_notes, oc_es_hgen, oc_es_agen, oc_es_sgen, starts_with("oc_es_int"))
# Select revelent pedigree information, rename as needed. (Include GroupAssignment for treatment progress calculation).
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#Exchange commas out of Prep Sheet to avoid CSV issues. Personal selection was a "/" but you can change it here to preference.
Redcap_Data <- sapply(Redcap_Data, gsub, pattern = ",", replacement= "/")
# Merge Predigree and redcap files
ES_PREP <- merge(Pedigree_Prep, Redcap_Data,by = c("timepoint","Fam_ID"), all = TRUE)
# Clean Environment
rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Redcap_Data)
# Set neccessary data to numeric so they can be used in calculations
ES_PREP[, c(10:12,14:16,18:20)] <- sapply(ES_PREP[, c(10:12,14:16,18:20)], as.numeric)
# Created calculated columns
ES_PREP <- add_column(ES_PREP, oc_es_hap_total = rowSums(ES_PREP[, c("oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3")]),.after = "oc_es_hap_3")
ES_PREP <- add_column(ES_PREP, oc_es_ang_total = rowSums(ES_PREP[, c("oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3")]),.after = "oc_es_ang_3")
ES_PREP <- add_column(ES_PREP, oc_es_sad_total = rowSums(ES_PREP[, c("oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")]),.after = "oc_es_sad_3")
ES_PREP <- add_column(ES_PREP, oc_es_total = rowSums(ES_PREP[, c("oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3", "oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3", "oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")]),.after = "oc_es_sad_Total")
ES_PREP <- add_column(ES_PREP, oc_es_total = rowSums(ES_PREP[, c("oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3", "oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3", "oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")]),.after = "oc_es_sad_total")
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Treatment Progress sheet
# Select needed column
Progress <- select(ES_PREP, c(Fam_ID, GroupAssignment, timepoint, oc_es_hap_total, oc_es_ang_total, oc_es_sad_total))
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Hap_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(HapMean = mean(oc_es_hap_total,na.rm = T),count = n())
Progress_Ang_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(AngMean = mean(oc_es_ang_total,na.rm = T),count = n())
Progress_Sad_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(SadMean = mean(oc_es_sad_total,na.rm = T),count = n())
Progress_Total_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(oc_es_total,na.rm = T),count = n())
# Treatment Progress sheet
# Select needed column
Progress <- select(ES_PREP, c(Fam_ID, GroupAssignment, timepoint, oc_es_hap_total, oc_es_ang_total, oc_es_sad_total, oc_es_total))
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Hap_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(HapMean = mean(oc_es_hap_total,na.rm = T),count = n())
Progress_Ang_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(AngMean = mean(oc_es_ang_total,na.rm = T),count = n())
Progress_Sad_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(SadMean = mean(oc_es_sad_total,na.rm = T),count = n())
Progress_Total_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(oc_es_total,na.rm = T),count = n())
# Join happy, angry, sad, and total
Progress_Mean <- merge(Progress_Hap_Mean, Progress_Ang_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Sad_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Total_Mean)
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Mean
Progress_Hap_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_HappyMean" = mean(oc_es_hap_total,na.rm = T),n = n())
Progress_Ang_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_AngryMean" = mean(oc_es_ang_total,na.rm = T),n = n())
Progress_Sad_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_SadMean" = mean(oc_es_sad_total,na.rm = T),n = n())
Progress_Total_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_TotalMean" = mean(oc_es_total,na.rm = T),n = n())
Both_Site_Mean <- merge(Progress_Hap_Mean_Both, Progress_Ang_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Sad_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Total_Mean_Both)
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "HapMean"] = "UO_ES_HappyMean"
colnames(UO)[colnames(UO) == "AngMean"] = "UO_ES_AngryMean"
colnames(UO)[colnames(UO) == "SadMean"] = "UO_ES_SadMean"
colnames(UO)[colnames(UO) == "TotalMean"] = "UO_ES_TotalMean"
colnames(UPMC)[colnames(UPMC) == "HapMean"] = "UPMC_ES_HappyMean"
colnames(UPMC)[colnames(UPMC) == "AngMean"] = "UPMC_ES_AngryMean"
colnames(UPMC)[colnames(UPMC) == "SadMean"] = "UPMC_ES_SadMean"
colnames(UPMC)[colnames(UPMC) == "TotalMean"] = "UPMC_ES_TotalMean"
# Treatment Progress sheet
# Select needed column
Progress <- select(ES_PREP, c(Fam_ID, GroupAssignment, timepoint, oc_es_hap_total, oc_es_ang_total, oc_es_sad_total, oc_es_total))
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Hap_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(HapMean = mean(oc_es_hap_total,na.rm = T),count = n())
Progress_Ang_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(AngMean = mean(oc_es_ang_total,na.rm = T),count = n())
Progress_Sad_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(SadMean = mean(oc_es_sad_total,na.rm = T),count = n())
Progress_Total_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(TotalMean = mean(oc_es_total,na.rm = T),count = n())
# Join happy, angry, sad, and total
Progress_Mean <- merge(Progress_Hap_Mean, Progress_Ang_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Sad_Mean)
Progress_Mean <- merge(Progress_Mean, Progress_Total_Mean)
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Mean
Progress_Hap_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_HappyMean" = mean(oc_es_hap_total,na.rm = T),n = n())
Progress_Ang_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_AngryMean" = mean(oc_es_ang_total,na.rm = T),n = n())
Progress_Sad_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_SadMean" = mean(oc_es_sad_total,na.rm = T),n = n())
Progress_Total_Mean_Both <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise("BothSite_ES_TotalMean" = mean(oc_es_total,na.rm = T),n = n())
Both_Site_Mean <- merge(Progress_Hap_Mean_Both, Progress_Ang_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Sad_Mean_Both)
Both_Site_Mean <- merge(Both_Site_Mean, Progress_Total_Mean_Both)
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "HapMean"] = "UO_ES_HappyMean"
colnames(UO)[colnames(UO) == "AngMean"] = "UO_ES_AngryMean"
colnames(UO)[colnames(UO) == "SadMean"] = "UO_ES_SadMean"
colnames(UO)[colnames(UO) == "TotalMean"] = "UO_ES_TotalMean"
colnames(UPMC)[colnames(UPMC) == "HapMean"] = "UPMC_ES_HappyMean"
colnames(UPMC)[colnames(UPMC) == "AngMean"] = "UPMC_ES_AngryMean"
colnames(UPMC)[colnames(UPMC) == "SadMean"] = "UPMC_ES_SadMean"
colnames(UPMC)[colnames(UPMC) == "TotalMean"] = "UPMC_ES_TotalMean"
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_ES_HappyMean","UO_ES_AngryMean", "UO_ES_SadMean", "UO_ES_TotalMean")],UPMC[,c("UPMC_ES_HappyMean", "UPMC_ES_AngryMean", "UPMC_ES_SadMean", "UPMC_TotalMean")],Both_Site_Mean[,c("BothSite_ES_HappyMean", "BothSite_ES_AngryMean", "BothSite_ES_SadMean", "BothSite_ES_TotalMean", "n", "GroupAssignment")])
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_ES_HappyMean","UO_ES_AngryMean", "UO_ES_SadMean", "UO_ES_TotalMean")],UPMC[,c("UPMC_ES_HappyMean", "UPMC_ES_AngryMean", "UPMC_ES_SadMean", "UPMC_ES_TotalMean")],Both_Site_Mean[,c("BothSite_ES_HappyMean", "BothSite_ES_AngryMean", "BothSite_ES_SadMean", "BothSite_ES_TotalMean", "n", "GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("Emotion Strategies Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
# Clean Environment
rm(Both_Site_Mean, Progress, Progress_Mean, Progress_Ang_Mean, Progress_Ang_Mean_Both, Progress_Hap_Mean, Progress_Hap_Mean_Both, Progress_Sad_Mean, Progress_Sad_Mean_Both, Progress_Total_Mean, Progress_Total_Mean_Both, UO, UPMC, ID, Timepoint_names)
