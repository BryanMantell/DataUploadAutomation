#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
View(EL_PREP)
View(EL_PREP)
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
Emotion_Labeling_NDA <- select(EL_PREP, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$oc_elt_total <- rowMeans(EL_PREP[,exp, rec], na.rm = TRUE)
EL_PREP$oc_elt_total <- rowMeans(EL_PREP[,exp], [,rec], na.rm = TRUE)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
rm(list = ls())
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
Emotion_Labeling_NDA <- select(EL_PREP, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress <- select(EL_PREP, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
# Calculate row mean for each individual
Progress$Row_Mean <- rowMeans(select(EL_PREP,c(starts_with("oc_elt"))), na.rm = T)
View(EL_PREP)
EL_PREP[,1:40] <- sapply(EL_PREP[,1:40],as.numeric)
View(EL_PREP)
EL_PREP[,1:23] <- sapply(EL_PREP[,1:23],as.numeric)
Progress$Row_Mean <- rowMeans(select(EL_PREP,c(starts_with("oc_elt"))), na.rm = T)
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(Row_Mean,na.rm = T),count = n())
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Mean
Both_site_Mean <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise(BothSite_EmotionalLabeling_Mean = mean(Row_Mean,na.rm = T),n = n())
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "GroupMean"] = "UO_EmotionalLabeling"
colnames(UPMC)[colnames(UPMC) == "GroupMean"] = "UPMC_EmotionalLabeling"
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_EmotionalLabeling")],UPMC[,"UPMC_EmotionalLabeling"],Both_site_Mean[,c("BothSite_EmotionalLabeling_Mean","n","GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_header_above(c(" " = 1, "DBT Group means" = 4, "Controls Group means" = 4, "FSU Group means" = 4)) %>%
add_header_above(c("Dimensional Card Sort Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
library(kableExtra)
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_header_above(c(" " = 1, "DBT Group means" = 4, "Controls Group means" = 4, "FSU Group means" = 4)) %>%
add_header_above(c("Dimensional Card Sort Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
rm(list = ls())
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(eeptools)
library(data.table)
library(kableExtra)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
Emotion_Labeling_NDA <- select(EL_PREP, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress <- select(EL_PREP, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
EL_PREP[,1:23] <- sapply(EL_PREP[,1:23],as.numeric)
# Calculate row mean for each individual
Progress$Row_Mean <- rowMeans(select(EL_PREP,c(starts_with("oc_elt"))), na.rm = T)
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress$Fam_ID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
group_by(GroupAssignment,timepoint,site) %>%
summarise(GroupMean = mean(Row_Mean,na.rm = T),count = n())
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Mean
Both_site_Mean <- Progress %>%
group_by(GroupAssignment, timepoint) %>%
summarise(BothSite_EmotionalLabeling_Mean = mean(Row_Mean,na.rm = T),n = n())
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "GroupMean"] = "UO_EmotionalLabeling"
colnames(UPMC)[colnames(UPMC) == "GroupMean"] = "UPMC_EmotionalLabeling"
# Combine UO,UPMC and both_site data
Mean_Table <- data.frame(UO[,c("UO_EmotionalLabeling")],UPMC[,"UPMC_EmotionalLabeling"],Both_site_Mean[,c("BothSite_EmotionalLabeling_Mean","n","GroupAssignment")])
# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)
# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)
# Reorder Mean_Table
Mean_Table <- Mean_Table[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table, names(Mean_Table), Timepoint_names)
# Table output ----------
# Add a header
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_header_above(c(" " = 1, "DBT Group means" = 4, "Controls Group means" = 4, "FSU Group means" = 4)) %>%
add_header_above(c("Dimensional Card Sort Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
kable(Mean_Table) %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_header_above(c(" " = 1, "Controls Group means" = 4, "FSU Group means" = 4, "DBT Group means" = 4)) %>%
add_header_above(c("Dimensional Card Sort Mean Table" = 13)) %>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
