column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
#Progress DBT_WCCL Table
Progress100 <- select(WCCL_PREP100, c(FamID, GroupAssignment, Timepoint, starts_with("srm")))
# Change FamId as character and assign to ID variable
ID <- c(as.character(Progress100$FamID))
# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress100$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")
#calculate rowmeans for each individual
Progress100$Row_Mean <- rowMeans(select(WCCL_PREP100,c(starts_with("srm"))), na.rm = T)
# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress100 %>%
group_by(GroupAssignment,Timepoint,site) %>%
summarise(GroupMean = mean(Row_Mean,na.rm = T),count = n())
# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]
# Calculate Both site Means
Both_site_Mean <- Progress_Mean %>%
group_by(GroupAssignment, Timepoint) %>%
summarise(BothSiteMean = mean(GroupMean,na.rm = T),n = sum(count))
#Progress_Mean <- Progress_Mean[order(GroupAssignment),]
# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "GroupMean"] = "UO_WCCL"
colnames(UPMC)[colnames(UPMC) == "GroupMean"] = "UPMC_WCCL"
# Combine UO,UPMC and both_site data
Mean_Table100 <- data.frame(UO[,c("UO_WCCL")],UPMC[,"UPMC_WCCL"],Both_site_Mean[,c("BothSiteMean","n", "GroupAssignment")])
#Mean_Table <- select(Mean_Table, -c(GroupAssignment))
# Convert Mean_Table, make original column as row
Mean_Table100 <- t(Mean_Table100)
# Make Mean_Table as a data.frame
Mean_Table100 <- data.frame(Mean_Table100)
Mean_Table100 <- Mean_Table100[c(5,6,7,8,9,10,11,12,1,2,3,4)]
# Add Timepoint column
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")
# Rename column name
setnames(Mean_Table100, names(Mean_Table100), Timepoint_names)
# Add a header
kable(Mean_Table100) %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_header_above(c(" " = 1, "Control Group means" = 4, "FSU means" = 4, "DBT Group means" = 4)) %>% add_header_above(c("WCCL Table Means 100%" = 13))%>%
column_spec(c(1,5,9), border_right = T, include_thead = T) %>%
column_spec(c(2,3,4,5,6,7,8,9,10,11,12,13), width_min = "2cm", width_max = "2cm")
#### Original Table ####
# Original by site
N_ori <- Progress %>%
group_by(Timepoint, site, GroupAssignment) %>%
summarise(n_ori = n())
# Original both site
N_ori_BothSite <- Progress %>%
group_by(Timepoint, GroupAssignment) %>%
summarise(BothSite_Original_N = n())
#### 67% table ####
# 67% by site
N67 <- WCCL_PREP67 %>%
group_by(Timepoint, site, GroupAssignment) %>%
summarise(n_67 = n())
# 67% both site
N67_BothSite <- WCCL_PREP67 %>%
group_by(Timepoint, GroupAssignment) %>%
summarise(BothSite_67_N = n())
#### 100% table ####
N100 <- WCCL_PREP100 %>%
group_by(Timepoint, site, GroupAssignment) %>%
summarise(n_100 = n())
# 100% both site
N100_BothSite <- WCCL_PREP100 %>%
group_by(Timepoint, GroupAssignment) %>%
summarise(BothSite_100_N = n())
#### N table ####
# combine all three n table
N_bySite <- cbind(N_ori, N67, N100)
# Bind both site data
BothSite_N <- cbind(N_ori_BothSite, N67_BothSite, N100_BothSite)
# Seperate UO and UPMC data
UO_N <- data.frame(N_bySite[N_bySite$site == "UO",])
UPMC_N <- data.frame(N_bySite[N_bySite$site == "UPMC",])
# Change column names
colnames(UO_N)[colnames(UO_N) == "n_ori"] = "UO_WCCL_Original_N"
colnames(UO_N)[colnames(UO_N) == "n_67"] = "UO_WCCL_67_N"
colnames(UO_N)[colnames(UO_N) == "n_100"] = "UO_WCCL_100_N"
colnames(UPMC_N)[colnames(UPMC_N) == "n_ori"] = "UPMC_WCCL_Original_N"
colnames(UPMC_N)[colnames(UPMC_N) == "n_67"] = "UPMC_WCCL_67_N"
colnames(UPMC_N)[colnames(UPMC_N) == "n_100"] = "UPMC_WCCL_100_N"
# Create N table (Selecting columns from UO_N, UPMC_N, BothSite_N)
N <- data.frame(UO_N[, c("Timepoint","UO_WCCL_Original_N", "UO_WCCL_67_N", "UO_WCCL_100_N")],
UPMC_N[, c("UPMC_WCCL_Original_N", "UPMC_WCCL_67_N", "UPMC_WCCL_100_N", "GroupAssignment")],
BothSite_N[, c("BothSite_Original_N", "BothSite_67_N", "BothSite_100_N", "GroupAssignment")])
# Reorder N table base on GroupAssignment
N <- N[order(N$GroupAssignment),]
# Convert data frame to numeric
N <- as.data.frame(sapply(N, as.numeric))
# Transfer N table from Horzontal to Vertical
N <- data.frame(t(N))
# Colculate Total N
N$T1 <- rowSums(N[,c(1,5,9)])
N$T2 <- rowSums(N[,c(2,6,10)])
N$T3 <- rowSums(N[,c(3,7,11)])
N$T4 <- rowSums(N[,c(4,8,12)])
# Timepoint names
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4", "T1","T2", "T3", "T4")
# Rename column name
setnames(N, names(N), Timepoint_names)
N <- N[-c(1,8,12),]
# Remove un-needed lines in table
# N <- N[-c(1,2,3),]
# Total number colculation
kable(N) %>%
kable_styling(bootstrap_options = c("striped"), fixed_thead = T) %>%
add_header_above(c(" " = 1, "DBT Group" = 4, "Control Group" = 4, "FSU Group" = 4, "Totals" = 4)) %>%
add_header_above(c("Participant Numbers" = 17)) %>%
column_spec(c(1,5,9,13), border_right = T, include_thead = T) %>%
column_spec(2:17, width_min = "2cm", width_max = "2cm") %>%
row_spec(7:9, background = "#d3d3d3")
View(BothSite_N)
View(Progress)
rm(list = ls())
library(dplyr)
library(tidyverse)
library(data.table)
library(kableExtra)
library(knitr)
options(digits = 3)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(data.table)
library(kableExtra)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
View(Emotion_Labeling_REDCAP)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
#Separate Data into % response
EL_DROP <- EL_PREP[EL_PREP$NACheck > 0.67, ]
EL_PREP67 <- EL_PREP[EL_PREP$NACheck <= 0.67, ]
EL_PREP100 <- EL_PREP[EL_PREP$NACheck <= 0, ]
View(EL_PREP)
Emotion_Labeling_NDA <- select(EL_PREP67, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP67)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress67 <- select(EL_PREP67, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
EL_PREP67[,1:23] <- sapply(EL_PREP67[,1:23],as.numeric)
View(EL_PREP67)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
View(Emotion_Labeling_REDCAP)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(data.table)
library(kableExtra)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
#Separate Data into % response
EL_DROP <- EL_PREP[EL_PREP$NACheck > 0.67, ]
EL_PREP67 <- EL_PREP[EL_PREP$NACheck <= 0.67, ]
EL_PREP100 <- EL_PREP[EL_PREP$NACheck <= 0, ]
Emotion_Labeling_NDA <- select(EL_PREP67, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP67)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress67 <- select(EL_PREP67, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
View(Progress67)
EL_PREP67[,1:23] <- sapply(EL_PREP67[,1:23],as.numeric)
View(EL_PREP67)
View(Progress67)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(data.table)
library(kableExtra)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
#Separate Data into % response
EL_DROP <- EL_PREP[EL_PREP$NACheck > 0.67, ]
EL_PREP67 <- EL_PREP[EL_PREP$NACheck <= 0.67, ]
EL_PREP100 <- EL_PREP[EL_PREP$NACheck <= 0, ]
Emotion_Labeling_NDA <- select(EL_PREP67, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP67)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress67 <- select(EL_PREP67, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
EL_PREP67[,1:8,10,12,14,16:23] <- sapply(EL_PREP67[,1:8,10,12,14,16:23],as.numeric)
EL_PREP67[,1,2,3,4,5,6,7,8,10,12,14,16,17,18,19,20,21,22,23] <- sapply(EL_PREP67[,1,2,3,4,5,6,7,8,10,12,14,16,17,18,19,20,21,22,23] ,as.numeric)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(data.table)
library(kableExtra)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
#Separate Data into % response
EL_DROP <- EL_PREP[EL_PREP$NACheck > 0.67, ]
EL_PREP67 <- EL_PREP[EL_PREP$NACheck <= 0.67, ]
EL_PREP100 <- EL_PREP[EL_PREP$NACheck <= 0, ]
Emotion_Labeling_NDA <- select(EL_PREP67, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP67)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress67 <- select(EL_PREP67, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
EL_PREP67[,1:23] <- sapply(EL_PREP67[,1:23],as.numeric)
View(EL_PREP67)
#Clear Environment Setup
rm(list = ls())
#Enable Packages
library(dplyr)
library(tidyverse)
library(data.table)
library(kableExtra)
Emotion_Labeling_REDCAP <- read.csv("Redcap_Data.csv")
Pedigree <- read.csv("Reference_Pedigree.csv")
Emotion_Labeling_NDA <- read.csv("elt01_template.csv", skip=1)
#rename elt_exp names
eltpart1_exp <- "oc_elt_exp"
num_items <- seq(1:8)
new_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "_")
#rename elt_rec names
eltpart2_rec <- "oc_elt_rec"
num_items <- seq (1:4)
new_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "_")
#replace old eltpart1 names with new names
eltpart1_exp <- "eltpart1_exp"
num_items <- seq (1:8)
old_eltpart1_names <- paste(eltpart1_exp, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart1_names, new_eltpart1_names)
#replace old eltpart2 names with new names
eltpart2_rec <- "eltpart2_rec"
num_items <- seq (1:4)
old_eltpart2_names <- paste(eltpart2_rec, num_items, sep = "")
setnames(Emotion_Labeling_REDCAP, old_eltpart2_names, new_eltpart2_names)
#Assign timepoint from redcap_event_name
Emotion_Labeling_REDCAP$timepoint = sapply(strsplit(as.character(Emotion_Labeling_REDCAP$redcap_event_name), split = '_', fixed = T), function(x) (x[2]))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, c(Fam_ID = fam_id,  timepoint, starts_with("oc_elt_")))
Emotion_Labeling_REDCAP <- select(Emotion_Labeling_REDCAP, -c(oc_elt_notes))
#Select relevant pedigree information
Pedigree_T1 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time1Date, interview_age = MomAge_T1, child_sex = ChildGender, GroupAssignment), timepoint = 1 )
Pedigree_T2 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time2Date, interview_age = MomAge_T2, child_sex = ChildGender, GroupAssignment), timepoint = 2 )
Pedigree_T3 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time3Date, interview_age = MomAge_T3, child_sex = ChildGender, GroupAssignment), timepoint = 3 )
Pedigree_T4 <- data.frame(select(Pedigree, Fam_ID =  FamID, child_guid, child_famID = FamID_Child, interview_date = Time4Date, interview_age = MomAge_T4, child_sex = ChildGender, GroupAssignment), timepoint = 4 )
#Merge pedigree info
Pedigree_Prep <- rbind(Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4)
#merge Pedigree info and Redcap data
EL_PREP <- merge(Pedigree_Prep, Emotion_Labeling_REDCAP,by = c("timepoint","Fam_ID"), all = TRUE)
#clean environment
# rm(Pedigree, Pedigree_Prep, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, Emotion_Labeling_REDCAP)
exp <- colnames(select(EL_PREP, c("oc_elt_exp_2", "oc_elt_exp_4", "oc_elt_exp_6", "oc_elt_exp_8")))
rec <- colnames(select(EL_PREP, c("oc_elt_rec_1", "oc_elt_rec_2", "oc_elt_rec_3", "oc_elt_rec_4")))
EL_PREP$oc_elt_exp_total <- rowMeans(EL_PREP[,exp], na.rm = TRUE)
EL_PREP$oc_elt_rec_total <- rowMeans(EL_PREP[,rec], na.rm = TRUE)
EL_PREP$NACheck <- rowSums(is.na(select(EL_PREP, starts_with("oc_elt_"))))/ncol(dplyr::select(EL_PREP, starts_with("oc_elt_")))
#EL_PREP$EL_total_cor <- ifelse(EL_PREP$NACheck < 0.67, rowMeans(EL_PREP[,oc_elt_total], na.rm = TRUE), "NA")
#Separate Data into % response
EL_DROP <- EL_PREP[EL_PREP$NACheck > 0.67, ]
EL_PREP67 <- EL_PREP[EL_PREP$NACheck <= 0.67, ]
EL_PREP100 <- EL_PREP[EL_PREP$NACheck <= 0, ]
Emotion_Labeling_NDA <- select(EL_PREP67, c(subjectkey = child_guid, src_subject_id = child_famID, interview_date, interview_age, sex = child_sex, visit = timepoint, starts_with("oc_elt_")))
# Replace columns name
# Recreate first line in orignial NDA file
Emotion_Labeling_NDA <- bind_rows(Emotion_Labeling_NDA, EL_PREP67)
first_line <- matrix("", nrow = 1, ncol = ncol(Emotion_Labeling_NDA))
first_line[,1] <- "el"
# assign the second cell in first_line as "el"
first_line[,2] <- "1"
# NDA output ---------
# Create a new file in folder called el.csv, and put first line into this file
# el.csv file will be saved into same folder as current r script
write.table(first_line, file = "el01.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in Emotion_Ladeling_NDA into el.csv file
write.table(Emotion_Labeling_NDA, file = 'el01.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
Progress67 <- select(EL_PREP67, c(Fam_ID, GroupAssignment, timepoint, starts_with("oc_elt_")))
View(Progress67)
View(EL_PREP67)
View(EL_PREP67)
EL_PREP67[,9:23] <- sapply(EL_PREP67[,9:23],as.numeric)
View(EL_PREP67)
