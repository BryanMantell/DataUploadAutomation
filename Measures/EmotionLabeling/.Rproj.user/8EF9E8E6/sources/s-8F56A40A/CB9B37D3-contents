---
title: "WCCL"
author: "Kyle Murray"
date: "5/28/2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r setup}
#Clear Environment 
rm(list = ls())

#Enable Packages 
library(dplyr)
library(eeptools)
library(tidyverse)
library(data.table)
library(kableExtra)
library(knitr)

options(digits = 3)
```
```{r Import}
#Importing Pedigree/NDA Structure
Pedigree <- read.csv("Reference_Pedigree.csv")
NDA_WCCL <- read.csv("dbt_wccl01_template.csv", skip = 1)

# Import WCCL Files 
UO_T1_WCCL <- read.csv("UO_T1_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T1_WCCL <- read.csv("UPMC_T1_WCCL.csv", stringsAsFactors = FALSE)
UO_T2_WCCL <- read.csv("UO_T2_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T2_WCCL <- read.csv("UPMC_T2_WCCL.csv", stringsAsFactors = FALSE)
UO_T3_WCCL <- read.csv("UO_T3_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T3_WCCL <- read.csv("UPMC_T3_WCCL.csv", stringsAsFactors = FALSE)
UO_T4_WCCL <- read.csv("UO_T4_Qualtrics.csv", stringsAsFactors = FALSE)
UPMC_T4_WCCL <- read.csv("UPMC_T4_WCCL.csv", stringsAsFactors = FALSE)
```
```{r Rename Columns}
# creating new variable names 
wccl <- "srm_wccl"
num_items <- seq(1:59)
new_WCCL_names <- paste(wccl, num_items, sep = "_")
UO_Q155 <- "Q155"
old_UO_WCCL_names <- paste(UO_Q155, num_items, sep = "_")

#Replace old UO variable names with newly created names
setnames(UO_T1_WCCL, old_UO_WCCL_names, new_WCCL_names)
setnames(UO_T2_WCCL, old_UO_WCCL_names, new_WCCL_names)
setnames(UO_T3_WCCL, old_UO_WCCL_names, new_WCCL_names)
setnames(UO_T4_WCCL, old_UO_WCCL_names, new_WCCL_names)

#Replace old UPMC variable names with newly created names
UPMC_Q5 <- "Q5.1"
old_UPMC_WCCL_names <- paste(UPMC_Q5, num_items, sep = "_")
setnames(UPMC_T1_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
setnames(UPMC_T2_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
setnames(UPMC_T3_WCCL, old_UPMC_WCCL_names, new_WCCL_names)
setnames(UPMC_T4_WCCL, old_UPMC_WCCL_names, new_WCCL_names)

#edit UO WCCL time 1-4 to have only WCCL questions and fam ID 
UO_T1_WCCL <- select(UO_T1_WCCL, c(FamID=Q221, contains(wccl)))
UO_T2_WCCL <- select(UO_T2_WCCL, c(FamID=Q116, contains(wccl)))
UO_T3_WCCL <- select(UO_T3_WCCL, c(FamID=Q174, contains(wccl)))
UO_T4_WCCL <- select(UO_T4_WCCL, c(FamID=Q203, contains(wccl)))

#Edit UPMC T1-4 so only WCCL and FamID are left
UPMC_T1_WCCL <- select(UPMC_T1_WCCL, c(FamID=Q1.2, contains(wccl)))
UPMC_T2_WCCL <- select(UPMC_T2_WCCL, c(FamID=Q1.2, contains(wccl)))
UPMC_T3_WCCL <- select(UPMC_T3_WCCL, c(FamID=Q1.2, contains(wccl)))
UPMC_T4_WCCL <- select(UPMC_T4_WCCL, c(FamID=Q1.2, contains(wccl)))

#Binding UPMC And UO by time point
WCCL_T1 <- rbind(UO_T1_WCCL, UPMC_T1_WCCL)
WCCL_T2 <- rbind(UO_T2_WCCL, UPMC_T2_WCCL)
WCCL_T3 <- rbind(UO_T3_WCCL, UPMC_T3_WCCL)
WCCL_T4 <- rbind(UO_T4_WCCL, UPMC_T4_WCCL)
```
```{r Prep Sheet}
#setup Pedigree data by time point
Pedigree_T1 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time1Date, interview_age = MomAge_T1, GroupAssignment)
Pedigree_T2 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time2Date, interview_age = MomAge_T2, GroupAssignment)
Pedigree_T3 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time3Date, interview_age = MomAge_T3, GroupAssignment)
Pedigree_T4 <- select(Pedigree, FamID, mother_FamID = FamID_Mother, mom_guid, mother_sex = MomGender, interview_date = Time4Date, interview_age = MomAge_T4, GroupAssignment)

#merge Pedigree and WCCL by time point
WCCL_T1 <- merge(Pedigree_T1, WCCL_T1, by = 'FamID')
WCCL_T2 <- merge(Pedigree_T2, WCCL_T2, by = 'FamID')
WCCL_T3 <- merge(Pedigree_T3, WCCL_T3, by = 'FamID')
WCCL_T4 <- merge(Pedigree_T4, WCCL_T4, by = 'FamID')

#add time point column/populate with corresponding time point 
WCCL_T1$timepoint <- "Time 1"
WCCL_T2$timepoint <- "Time 2"
WCCL_T3$timepoint <- "Time 3"
WCCL_T4$timepoint <- "Time 4"

#Create WCCL_prep and merge datasets 
WCCL_PREP <- rbind(WCCL_T1, WCCL_T2, WCCL_T3, WCCL_T4)

#Clean Global Environment
rm(UO_T1_WCCL, UO_T2_WCCL, UO_T3_WCCL, UO_T4_WCCL, UPMC_T1_WCCL, UPMC_T2_WCCL, UPMC_T3_WCCL, UPMC_T4_WCCL, Pedigree, Pedigree_T1, Pedigree_T2, Pedigree_T3, Pedigree_T4, WCCL_T1, WCCL_T2, WCCL_T3, WCCL_T4)
```
```{r Recode}
#Recode Text to Integers
WCCL_PREP <- WCCL_PREP %>% mutate_at(new_WCCL_names,funs(recode(., '0 Never Used' = 0, '1 Rarely Used' = 1, '2 Sometimes Used' = 2, '3 Regularly Used' = 3,.default = NaN)))

#Change Numbers to Numeric values
WCCL_PREP[,1:59] <- sapply(WCCL_PREP[,1:59],as.numeric)

#Change gender to F instead of false
WCCL_PREP$mother_sex <- "F"
```
```{r Calculated Columns}
#Items for SU
SU <- colnames(select(WCCL_PREP, c("srm_wccl_1", "srm_wccl_2", "srm_wccl_4", "srm_wccl_6", "srm_wccl_9", "srm_wccl_10", "srm_wccl_11", "srm_wccl_13", "srm_wccl_16", "srm_wccl_18", "srm_wccl_19", "srm_wccl_21", "srm_wccl_22", "srm_wccl_23", "srm_wccl_26", "srm_wccl_27", "srm_wccl_29", "srm_wccl_31", "srm_wccl_33", "srm_wccl_34", "srm_wccl_35", "srm_wccl_36", "srm_wccl_38", "srm_wccl_39", "srm_wccl_40", "srm_wccl_42", "srm_wccl_43", "srm_wccl_44", "srm_wccl_47", "srm_wccl_49", "srm_wccl_50", "srm_wccl_51", "srm_wccl_53", "srm_wccl_54", "srm_wccl_56", "srm_wccl_57", "srm_wccl_58", "srm_wccl_59")))

#Items for GSC
GSC <- colnames(select(WCCL_PREP, c("srm_wccl_3", "srm_wccl_5", "srm_wccl_8", "srm_wccl_12", "srm_wccl_14", "srm_wccl_17", "srm_wccl_20", "srm_wccl_25", "srm_wccl_32", "srm_wccl_37", "srm_wccl_41", "srm_wccl_45", "srm_wccl_46", "srm_wccl_52", "srm_wccl_55")))

#Items for BO
BO <- colnames(select(WCCL_PREP, c("srm_wccl_7", "srm_wccl_15", "srm_wccl_24", "srm_wccl_28", "srm_wccl_30", "srm_wccl_48")))

#Calculated Columns 
WCCL_PREP$wccl_SU_raw <- rowMeans(WCCL_PREP[,SU], na.rm = TRUE)

WCCL_PREP$wccl_GSC_raw <- rowMeans(WCCL_PREP[,GSC], na.rm = TRUE)

WCCL_PREP$wccl_BO_raw <- rowMeans(WCCL_PREP[,BO], na.rm = TRUE)

#Mean with 67% Rule 
#Check NA Percentage
WCCL_PREP$NACheck <- rowSums(is.na(select(WCCL_PREP, starts_with("srm"))))/ncol(dplyr::select(WCCL_PREP, starts_with("srm")))

#New Mean with 67% Rule 
WCCL_PREP$wccl_SU_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,SU], na.rm = TRUE), "NA")

WCCL_PREP$wccl_GSC_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,GSC], na.rm = TRUE), "NA")

WCCL_PREP$wccl_BO_cor <- ifelse(WCCL_PREP$NACheck < 0.67, rowMeans(WCCL_PREP[,BO], na.rm = TRUE), "NA")
```
```{r NDA Sheet}
# Create NDA structure column names
dbt_wccl <- paste("dbt_wccl", 1:59, sep = "")
NDA_Names <- c(dbt_wccl)

#create NDA Prep structure 
NDA_WCCL_Prep <- select(WCCL_PREP, c(subjectkey = mom_guid, src_subject_id = mother_FamID, interview_date, interview_age, sex = mother_sex , visit = timepoint, starts_with("srm")))
setnames(NDA_WCCL_Prep, new_WCCL_names, NDA_Names)

#bind NDA_WCCL_Prep and NDA structure  
NDA_WCCL <- bind_rows(NDA_WCCL, NDA_WCCL_Prep)

#recreate first row of NDA structure
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_WCCL))

NDA_WCCL <- bind_rows(NDA_WCCL, NDA_WCCL_Prep)
first_line <- matrix("", nrow = 1, ncol = ncol(NDA_WCCL))

first_line[,1] <- "dbt_wccl"
first_line[,2] <- "1"
write.table(first_line, file = "dbt_wccl.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
write.table(NDA_WCCL, file = "dbt_wccl.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
```
```{r Table}

#Progress DBT_WCCL Table
Progress <- select(WCCL_PREP, c(FamID, GroupAssignment, timepoint, starts_with("srm")))

#calculate rowmeans for each individual
Progress$Row_Mean <- rowMeans(select(WCCL_PREP,c(starts_with("srm"))), na.rm = T)

# Change FamId as character and assign to ID variable 
ID <- c(as.character(Progress$FamID))

# Add Site column to Progress, if ID start with 9 then site is UO, else is UPMC
Progress$site <- ifelse(startsWith(ID, "9"),"UO","UPMC")

# Group by GroupAssissignment and Timepoint, and calculate the Group Mean
Progress_Mean <- Progress %>%
  group_by(GroupAssignment,timepoint,site) %>%
  summarise(GroupMean = mean(Row_Mean,na.rm = T),count = n())

# Select only UO Mean
UO <- Progress_Mean[Progress_Mean$site == "UO",]
# Select only UPMC Mean 
UPMC <- Progress_Mean[Progress_Mean$site == "UPMC",]

# Calculate Both site Means 
Both_site_Mean <- Progress_Mean %>%
  group_by(GroupAssignment, timepoint) %>%
  summarise(BothSiteMean = mean(GroupMean,na.rm = T),n = sum(count))

#Progress_Mean <- Progress_Mean[order(GroupAssignment),] 


# Change GroupMean Column names according to site
colnames(UO)[colnames(UO) == "GroupMean"] = "UO_WCCL"
colnames(UPMC)[colnames(UPMC) == "GroupMean"] = "UPMC_WCCL"

# Combine UO,UPMC and both_site data 
Mean_Table <- data.frame(UO[,c("UO_WCCL","GroupAssignment")],UPMC[,"UPMC_WCCL"],Both_site_Mean[,c("BothSiteMean","n")])

# Convert Mean_Table, make original column as row
Mean_Table <- t(Mean_Table)

# Make Mean_Table as a data.frame
Mean_Table <- data.frame(Mean_Table)

# Add Timepoint column 
Timepoint_names <- c("T1","T2", "T3", "T4","T1","T2", "T3", "T4","T1","T2", "T3", "T4")

# Rename column name 
setnames(Mean_Table, names(Mean_Table), Timepoint_names)

```
```{r Table}
# Add a header 
kable(Mean_Table) %>%
  kable_styling(bootstrap_options = "striped", full_width = F) %>%
  add_header_above(c(" " = 1, "DBT Group means" = 4, "FSU means" = 4, "Controls means" = 4))

Mean_Table <- select(Mean_Table, -c(GroupAssignment))
```



