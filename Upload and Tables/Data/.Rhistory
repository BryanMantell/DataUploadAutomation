# UO_Qualtrics_T1 <- UO_Qualtrics_T1 %>% rename(Fam_ID = Q221, Timepoint = Q146)
# UO_Qualtrics_T2 <- UO_Qualtrics_T2 %>% rename(Fam_ID = Q116, Timepoint = Q117)
# UO_Qualtrics_T3 <- UO_Qualtrics_T3 %>% rename(Fam_ID = Q174, Timepoint = Q176)
# UO_Qualtrics_T4 <- UO_Qualtrics_T4 %>% rename(Fam_ID = Q203, Timepoint = Q206)
# *************************************************************************
# SCIP Rename ####
# *************************************************************************
# *************************************************************************
# SID-P Rename ####
# *************************************************************************
# *************************************************************************
# PPVT Rename ####
# *************************************************************************
# PPVT changes are unnecessary, only bring preparation script pedigree data to PPVT
# *************************************************************************
# DERS Rename ####
# *************************************************************************
# Old UO name: Q137_1 ~ Q137_36
old_UO_ders_names <- paste("Q137", seq(1:36), sep = "_")
# Old UPMC name: Q6.1_1 ~ Q5.1_36
old_UPMC_ders_names <- paste("FQ4DERS", seq(1:36), sep = "_")
# New variable name for preparation sheet: srm_ders_1 ~ srm_ders_36
new_ders_names <- paste("srm_ders", seq(1:36), sep = '_')
# NDA ders name
ders <- "ders"
number_of_survey <- seq(1:36)
NDA_DERS_names <- paste(ders,number_of_survey,sep = '')
# rename UO & UPMC Ders Name
lapply(UO_Qualtrics_list, setnames, old_UO_ders_names, new_ders_names)
lapply(UPMC_Qualtrics_list, setnames, old_UPMC_ders_names, new_ders_names)
# Clean global Environment
rm(old_UO_ders_names, old_UPMC_ders_names, number_of_survey)
# *************************************************************************
# CBCL Rename ####
# *************************************************************************
# Create list of new variable names for the Prep Sheet
New_CBCL_Names <- sprintf("srm_CBCL_%03d", seq(1:100))
# Create list of old variable names so we can target them to be replaced with the new ones
# Since the question names change by timepoint we'll have to make unique lists by timepoint, starting with UO Timepoint 1 and UMPC Timepoint 1 and 4
Old_UO_CBCL_Names_T1 <- sprintf("Q264_%01d", seq(1:100))
# Old names for UO Timepoint 2
Old_UO_CBCL_Names_T2 <- sprintf("Q368_%01d", seq(1:100))
# Old names for UO Timepoint 3
Old_UO_CBCL_Names_T3 <- sprintf("Q534_%01d", seq(1:100))
# Old names for UO timepoint 4
Old_UO_CBCL_Names_T4 <- sprintf("Q828_%01d", seq(1:100))
# Old UPMC name
Old_UPMC_CBCL_Names <- sprintf("FQ4CBCLB_%01d", seq(1:100))
# Replace UO & UMPC column names in list
lapply(UO_Qualtrics_list[1], setnames, Old_UO_CBCL_Names_T1, New_CBCL_Names)
lapply(UO_Qualtrics_list[2], setnames, Old_UO_CBCL_Names_T2, New_CBCL_Names)
lapply(UO_Qualtrics_list[3], setnames, Old_UO_CBCL_Names_T3, New_CBCL_Names)
lapply(UO_Qualtrics_list[4], setnames, Old_UO_CBCL_Names_T4, New_CBCL_Names)
lapply(UPMC_Qualtrics_list, setnames, Old_UPMC_CBCL_Names, New_CBCL_Names)
# Clean environment
rm(New_CBCL_Names, Old_UO_CBCL_Names_T1, Old_UO_CBCL_Names_T2, Old_UO_CBCL_Names_T3, Old_UO_CBCL_Names_T4,Old_UPMC_CBCL_Names)
# *************************************************************************
# CCNES Rename ####
# *************************************************************************
# Old UO name: Q140_1 ~ Q151_3
# Old UPMC name: FQ4CCNES_1 ~ FQ4CCNES_6, FQ4CCNES2_1 ~ FQ4CCNES12_6
# TODO: Check does UPMC variable names consistent cross timepoint
# New CCNES name: srm_CCNES_01 ~ srm_CCNES_72
# NDA name: pabq1a ~ pabq12f
# OLD UO CCNES Column Names
# for each item in UO paste number 1 to 6, "sprintf" used to format string
old_UO_CCNES_names <- c()
for (i in sprintf("Q%03d",140:151)) {
ccnes_name <- paste(i, 1:6, sep = "_")
old_UO_CCNES_names <- c(old_UO_CCNES_names, ccnes_name)
}
# OLD UPMC CCNES Column Names
old_UPMC_CCNES_names <- paste("FQ4CCNES",1:6, sep = "_")
for (i in sprintf("FQ4CCNES",2:12)) {
ccnes_name <- paste(i,2:12, sep = "")
}
for (n in ccnes_name) {
ccnes_name_1 <- paste(n,1:6,sep = "_")
old_UPMC_CCNES_names <- c(old_UPMC_CCNES_names, ccnes_name_1)
}
# CCNES Prep Column Names
new_CCNES_names <- sprintf("srm_CCNES_%02d",1:72)
# Replace UO&UPMC column names
lapply(UPMC_Qualtrics_list, setnames, old_UPMC_CCNES_names, new_CCNES_names)
lapply(UO_Qualtrics_list, setnames, old_UO_CCNES_names, new_CCNES_names)
# NDA structure Column Names ####
pabq <- paste("pabq",1:12, sep = "")
CCNES_NDA_Names <- c()
for (i in pabq) {
Name <- paste(i, letters[seq(1:6)], sep = "")
CCNES_NDA_Names <- c(CCNES_NDA_Names, Name)
}
# Clean environment
rm(old_UO_CCNES_names, i, n, old_UPMC_CCNES_names, ccnes_name, ccnes_name_1)
# *************************************************************************
# AAQ Rename ####
# *************************************************************************
# Create list of new variable names
new_AAQ_names <- paste("srm_aaq", seq(1:10), sep = '_')
# Create list of old variable names so we can replace them with the new ones
old_UO_AAQ_names <- paste("Q154", seq(1:10), sep = "_")
old_UPMC_AAQ_names <- paste("FQ4AAQ", seq(1:10), sep = "_")
# Replace UO&UPMC column names
lapply(UO_Qualtrics_list, setnames, old_UO_AAQ_names, new_AAQ_names)
lapply(UPMC_Qualtrics_list, setnames, old_UPMC_AAQ_names, new_AAQ_names)
# Clean environment
rm(old_UO_AAQ_names,old_UPMC_AAQ_names)
# *************************************************************************
# WCCL Rename ####
# *************************************************************************
# Create new variable names
new_WCCL_names <- paste("srm_wccl", seq(1:59), sep = "_")
# Old UO variable names
old_UO_WCCL_names <- paste("Q155", seq(1:59), sep = "_")
# Old UPMC variable names
old_UPMC_WCCL_names <- paste("FQ4WCCL", seq(1:59), sep = "_")
lapply(UO_Qualtrics_list, setnames, old_UO_WCCL_names, new_WCCL_names)
lapply(UPMC_Qualtrics_list, setnames, old_UPMC_WCCL_names, new_WCCL_names)
# Clean environment
rm(old_UO_WCCL_names,old_UPMC_WCCL_names)
# *************************************************************************
# PKBS Rename ####
# *************************************************************************
# Create list of new variable names
new_PKBS_names <- paste("srm_pkbs", seq(1:33), sep = '_')
# Now make a list of old variable names so that we can replace them with the neww ones
old_UO_PKBS_names <- paste("Q407", seq(1:33), sep = "_")
old_UO_PKBS_names2 <- paste("Q359", seq(1:33), sep = "_")
old_UO_PKBS_names3 <- paste("Q524", seq(1:33), sep = "_")
old_UO_PKBS_names4 <- paste("Q817", seq(1:33), sep = "_")
old_UPMC_PKBS_names <- paste("FQ4PKBS", seq(1:33), sep = "_")
# Change UO column names
setnames(UO_Qualtrics_T1, old_UO_PKBS_names, new_PKBS_names, skip_absent = FALSE)
setnames(UO_Qualtrics_T2, old_UO_PKBS_names2, new_PKBS_names, skip_absent = FALSE)
setnames(UO_Qualtrics_T3, old_UO_PKBS_names3, new_PKBS_names, skip_absent = FALSE)
setnames(UO_Qualtrics_T4, old_UO_PKBS_names4, new_PKBS_names, skip_absent = FALSE)
# Change UPMC column names
lapply(UPMC_Qualtrics_list, setnames, old_UPMC_PKBS_names, new_PKBS_names)
# Clean environment
rm(old_UO_PKBS_names, old_UO_PKBS_names2, old_UO_PKBS_names3, old_UO_PKBS_names4, old_UPMC_PKBS_names)
# *************************************************************************
# Bear Dragon Rename ####
# *************************************************************************
# Do not need to be renamed
# *************************************************************************
# Affect Perspective Taking Rename ####
# *************************************************************************
# Convert each columns different child ratings into master recode
Redcap_Data$oc_apt_01[which(Redcap_Data$oc_apt_01 == "2")] = 1
Redcap_Data$oc_apt_01[which(Redcap_Data$oc_apt_01 == "4")] = 2
Redcap_Data$oc_apt_01[which(Redcap_Data$oc_apt_01 == "5")] = 3
Redcap_Data$oc_apt_01[which(Redcap_Data$oc_apt_01 == "6")] = 4
Redcap_Data$oc_apt_02[which(Redcap_Data$oc_apt_02 == "4")] = 1
Redcap_Data$oc_apt_02[which(Redcap_Data$oc_apt_02 == "2")] = 2
Redcap_Data$oc_apt_02[which(Redcap_Data$oc_apt_02 == "7")] = 3
Redcap_Data$oc_apt_02[which(Redcap_Data$oc_apt_02 == "8")] = 4
Redcap_Data$oc_apt_03[which(Redcap_Data$oc_apt_03 == "4")] = 1
Redcap_Data$oc_apt_03[which(Redcap_Data$oc_apt_03 == "7")] = 2
Redcap_Data$oc_apt_03[which(Redcap_Data$oc_apt_03 == "2")] = 3
Redcap_Data$oc_apt_03[which(Redcap_Data$oc_apt_03 == "8")] = 4
Redcap_Data$oc_apt_04[which(Redcap_Data$oc_apt_04 == "4")] = 1
Redcap_Data$oc_apt_04[which(Redcap_Data$oc_apt_04 == "7")] = 2
Redcap_Data$oc_apt_04[which(Redcap_Data$oc_apt_04 == "8")] = 3
Redcap_Data$oc_apt_04[which(Redcap_Data$oc_apt_04 == "2")] = 4
Redcap_Data$oc_apt_05[which(Redcap_Data$oc_apt_05 == "2")] = 1
Redcap_Data$oc_apt_05[which(Redcap_Data$oc_apt_05 == "4")] = 2
Redcap_Data$oc_apt_05[which(Redcap_Data$oc_apt_05 == "5")] = 3
Redcap_Data$oc_apt_05[which(Redcap_Data$oc_apt_05 == "6")] = 4
Redcap_Data$oc_apt_06[which(Redcap_Data$oc_apt_06 == "4")] = 1
Redcap_Data$oc_apt_06[which(Redcap_Data$oc_apt_06 == "2")] = 2
Redcap_Data$oc_apt_06[which(Redcap_Data$oc_apt_06 == "7")] = 3
Redcap_Data$oc_apt_06[which(Redcap_Data$oc_apt_06 == "8")] = 4
Redcap_Data$oc_apt_07[which(Redcap_Data$oc_apt_07 == "4")] = 1
Redcap_Data$oc_apt_07[which(Redcap_Data$oc_apt_07 == "7")] = 2
Redcap_Data$oc_apt_07[which(Redcap_Data$oc_apt_07 == "8")] = 3
Redcap_Data$oc_apt_07[which(Redcap_Data$oc_apt_07 == "2")] = 4
Redcap_Data$oc_apt_08[which(Redcap_Data$oc_apt_08 == "4")] = 1
Redcap_Data$oc_apt_08[which(Redcap_Data$oc_apt_08 == "7")] = 2
Redcap_Data$oc_apt_08[which(Redcap_Data$oc_apt_08 == "2")] = 3
Redcap_Data$oc_apt_08[which(Redcap_Data$oc_apt_08 == "8")] = 4
# Convert column names to odd numbers to represent participant response
old_AffectPT_names <- c("oc_apt_01", "oc_apt_02", "oc_apt_03", "oc_apt_04", "oc_apt_05", "oc_apt_06",
"oc_apt_07", "oc_apt_08")
new_AffectPT_names <- c("oc_apt_01", "oc_apt_03", "oc_apt_05", "oc_apt_07", "oc_apt_09", "oc_apt_11",
"oc_apt_13", "oc_apt_15")
setnames(Redcap_Data, old_AffectPT_names, new_AffectPT_names, skip_absent = FALSE)
# Clean environment
rm(old_AffectPT_names)
# *************************************************************************
# Dimensional Card Sort Rename ####
# *************************************************************************
# Redcap column name: oc_dcs_1:36
old_DCS_names <- sprintf("oc_dcs_%02d", 1:36)
# DCCS NDA Columns Name
NDA_DCS_names <- sprintf("dcs%02d", 1:36)
# *************************************************************************
# Emotion Labeling Rename ####
# *************************************************************************
# rename elt_exp names
new_eltpart1_names <- paste("oc_elt_exp", seq(1:8), sep = "_")
# rename elt_rec names
new_eltpart2_names <- paste("oc_elt_rec", seq(1:4), sep = "_")
# replace old eltpart1 names with new names
old_eltpart1_names <- paste("eltpart1_exp", seq(1:8), sep = "")
setnames(Redcap_Data, old_eltpart1_names, new_eltpart1_names)
# replace old eltpart2 names with new names
old_eltpart2_names <- paste("eltpart2_rec", seq(1:4), sep = "")
setnames(Redcap_Data, old_eltpart2_names, new_eltpart2_names)
# Clean environment
rm(old_eltpart1_names, old_eltpart2_names)
# *************************************************************************
# Emotion Strategies Rename ####
# *************************************************************************
# Redcap column names for locating old names to be replaced with Prep names and NDA names
new_ES_names <- c("oc_es_hapstrat", "oc_es_hap_1", "oc_es_hap_2", "oc_es_hap_3", "oc_es_angstrat", "oc_es_ang_1", "oc_es_ang_2", "oc_es_ang_3", "oc_es_sadstrat", "oc_es_sad_1", "oc_es_sad_2", "oc_es_sad_3")
old_ES_names <- c("oc_es_hapstrat", "oc_es_h1", "oc_es_h2", "oc_es_h3", "oc_es_angstrat", "oc_es_a1", "oc_es_a2", "oc_es_a3", "oc_es_sadstrat", "oc_es_s1", "oc_es_s2", "oc_es_s3")
# Replace Column Names
setnames(Redcap_Data, old_ES_names, new_ES_names)
# Clean environment
rm(old_ES_names)
# TODO: merge session
# Bind 4 time points from two site
# TODO: Need to find a way to merge UO and UPMC Qualtrics, due to different variable names cross site
# TODO: Bind doesn't work for now because Variabl name different cross sit
UPMC_Qualtrics <- rbind(UPMC_Qualtrics_T1, UPMC_Qualtrics_T2, UPMC_Qualtrics_T3, UPMC_Qualtrics_T4)
UO_Qualtrics <- bind_rows(UO_Qualtrics_T1, UO_Qualtrics_T2, UO_Qualtrics_T3, UO_Qualtrics_T4)
#TODO: will be removed
UPMC_Qualtrics <- UPMC_Qualtrics %>%
mutate_all(as.character)
UO_Qualtrics <- UO_Qualtrics %>%
mutate_all(as.character)
# Merge UO and UPMC data
Qualtrics <- bind_rows(UO_Qualtrics,UPMC_Qualtrics)
# Merge Qualtrics data with pedigree
Qualtrics <- merge(Qualtrics, Pedigree, by = c("Fam_ID","Timepoint"))
# Change gender to F instead of False
Qualtrics$mother_sex <- "F"
# Clean global Environment
rm(UO_Qualtrics_T1, UO_Qualtrics_T2, UO_Qualtrics_T3, UO_Qualtrics_T4, UO_Qualtrics,
UPMC_Qualtrics_T1, UPMC_Qualtrics_T2, UPMC_Qualtrics_T3, UPMC_Qualtrics_T4, UPMC_Qualtrics, UPMC_Qualtrics_list, UO_Qualtrics_list)
# Note ####
# *************************************************************************
print("Output list: Pedigree, Qualtrics, Redcap_Data")
cat("\n Pedigree column name: Pedigree_name")
cat('\n DERS variable names: new_ders_names')
cat('\n CBCL variable names: New_CBCL_Names')
cat('\n CCNES variable names updated: new_CCNES_names')
cat('\n AAQ variable names updated: new_AAQ_names')
cat('\n WCCL variable names updated: new_WCCL_names')
cat('\n PKBS variable names updated: new_PKBS_names')
cat('\n Bear Dragon variable names updated:  ')   # TODO
cat('\n Affect Perspective Taking variable names updated: new_AffectPT_names')
cat('\n Dimensional Card Sort variable names updated: old_DCS_names')
cat('\n Emotion Labeling variable names updated: new_eltpart1_names, new_eltpart2_names')
cat('\n Emotion Strategies variable names updated: new_ES_names')
View(Pedigree)
setwd("~/GitHub/DataUploadAutomation/Upload and Tables/Data")
#source("~/GitHub/DataUploadAutomation/Upload and Tables/Data/Upload Preparation.R")
PPVT_NDA <- read.csv("ppvt_4a02_template.csv", skip = 1, stringsAsFactors = FALSE)
UPMC_PPVT_Data <- read.csv("UPMC_PPVT_Data.csv", stringsAsFactors = FALSE)
UO_PPVT_Data <- read.csv("UO_PPVT_Data.csv", stringsAsFactors = FALSE)
View(UPMC_PPVT_Data)
View(UO_PPVT_Data)
# Redcap column names for locating old names to be replaced with Prep names and NDA names
PPVT_names <- c("om_ppvt_rs", "om_ppvt_ss", "oc_ppvt_rs", "oc_ppvt_ss")
NDA_PPVT_names <- c("ss_rawscore", "ss_standardscore")
# Select needed columns and rename in Redcap_Data & UPMC_PPVT_Data, then merge the two timepoints together
UO_PPVTMom_Data <- select(UO_PPVT_Data, c(Fam_ID = fam_id, om_ppvt_rs, om_ppvt_ss))
UO_PPVTChild_Data <- select(UO_PPVT_Data, c(Fam_ID = fam_id, oc_ppvt_rs, oc_ppvt_ss))
Redcap_Data_PPVT <- merge(na.omit(UO_PPVTMom_Data), na.omit(UO_PPVTChild_Data), all=TRUE)
UPMC_PPVT_Data <- select(UPMC_PPVT_Data, c(Fam_ID = STEADY.ID., om_ppvt_rs = Parent.PPVT.Raw.Score, om_ppvt_ss = Parent.PPVT.Standard.Score, oc_ppvt_rs = Child.PPVT.Raw.Score, oc_ppvt_ss = Child.PPVT.Standard.Score))
PPVT_BothSite_Data <- rbind(Redcap_Data_PPVT, UPMC_PPVT_Data)
# Select revelent pedigree information, rename as needed.
Pedigree_Prep <- data.frame(select(Pedigree, Fam_ID, Timepoint, child_guid, mom_guid, child_famID, FamID_Mother, interview_date, interview_age_Mom, interview_age_child, child_sex, sex_mother, GroupAssignment))
# Filter Pedigree so that is only has T1
Pedigree_Prep <- Pedigree_Prep[Pedigree_Prep$Timepoint == 1, ]
# Merge Predigree and redcap files
PPVT_PREP <- merge(Pedigree_Prep, PPVT_BothSite_Data,by = c("Fam_ID"), all.x = TRUE)
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = "0")
PPVT_PREP_UO_Mom <- PPVT_PREP_UO_Mom[PPVT_PREP_UO_Mom$Fam_ID > 12000, ]
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, mom_guid = guid,FamID_Mother = src_subject_id, interview_date, interview_age_Mom = interview_age, sex_mother = sex, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = "0")
PPVT_PREP_UPMC_Mom <- Select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = "1")
library(dplyr)
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = "0")
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = "0")
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
View(PPVT_PREP_UO_Mom)
PPVT_PREP_UO_Mom <- PPVT_PREP_UO_Mom[PPVT_PREP_UO_Mom$Fam_ID > 12000, ]
View(PPVT_PREP_UO_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = "1")
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = 1)
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = '0')
View(PPVT_NDA)
View(PPVT_PREP_UO_Mom)
View(PPVT_PREP_UPMC_Mom)
help("add_column")
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UO_Mom <- add_column(PPVT_PREP_UO_Mom, Timepoint = "0")
View(PPVT_PREP_UO_Mom)
PPVT_PREP_UO_Mom <- PPVT_PREP_UO_Mom[PPVT_PREP_UO_Mom$Fam_ID > 12000, ]
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID < 12000, ]
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = 1)
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID < 12000, ]
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss), Timepoint = 1)
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID < 12000, ]
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID < 12000, ]
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID > 80000, ]
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID > 80000, ]
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UO_Mom$Fam_ID < 80000, ]
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
View(PPVT_PREP_UO_Mom)
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UPMC_Mom$Fam_ID > 12000, ]
View(PPVT_PREP_UPMC_Mom)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UPMC_Mom$Fam_ID < 12000, ]
View(PPVT_PREP_UPMC_Mom)
View(PPVT_PREP)
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss, Timepoint))
#PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UPMC_Mom$Fam_ID < 12000, ]
View(PPVT_PREP_UPMC_Mom)
View(PPVT_PREP)
PPVT_PREP_Child <- select(PPVT_PREP, c(Fam_ID, guid = child_guid, src_subject_id = child_famID, interview_date, interview_age = interview_age_child, sex = child_sex, GroupAssignment, Timepoint, oc_ppvt_rs, oc_ppvt_ss))
# Merge selected data together so that mother and child each have their own rows, you should now have the complete PPVT_PREP sheet
# Temp Note: I'm assuming that using the merge command in this way will generate the proper NAs in the "oc" and "om" responses, so all four columns should be present. Consider all = true if something doesn't merge.
PPVT_PREP_Mom <- merge(PPVT_PREP_UO_Mom, PPVT_PREP_UPMC_Mom)
View(PPVT_PREP_Mom)
# Pull apart PPVT_prep and place data into NDA template so that Mom and child are on their own rows
# Pull mother data for UO and UPMC individual to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UO_Mom <- add_column(PPVT_PREP_UO_Mom, Timepoint = "0")
PPVT_PREP_UO_Mom <- PPVT_PREP_UO_Mom[PPVT_PREP_UO_Mom$Fam_ID > 12000, ]
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, Timepoint, om_ppvt_rs, om_ppvt_ss))
#PPVT_PREP_UPMC_Mom <- add_column(PPVT_PREP_UPMC_Mom, Timepoint = "1")
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UPMC_Mom$Fam_ID < 12000, ]
View(PPVT_PREP_UO_Mom)
View(PPVT_PREP_UPMC_Mom)
# Merge selected data together so that mother and child each have their own rows, you should now have the complete PPVT_PREP sheet
# Temp Note: I'm assuming that using the merge command in this way will generate the proper NAs in the "oc" and "om" responses, so all four columns should be present. Consider all = true if something doesn't merge.
PPVT_PREP_Mom <- merge(PPVT_PREP_UO_Mom, PPVT_PREP_UPMC_Mom, all = TRUE)
View(PPVT_PREP_Mom)
PPVT_PREP <- merge(PPVT_PREP_Mom, PPVT_PREP_Child, all = TRUE)
View(PPVT_PREP)
View(PPVT_PREP)
#### NDA Upload ####
# Create NDA prep sheet for mom and child data, select all the needed columns from prep sheet
NDA_PPVT_Prep_Child <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = oc_ppvt_rs, ss_standardscore = oc_ppvt_ss))
NDA_PPVT_Prep_Mom <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = om_ppvt_rs, ss_standardscore = om_ppvt_ss))
View(NDA_PPVT_Prep_Child)
NDA_PPVT_Prep_Mom <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = om_ppvt_rs, ss_standardscore = om_ppvt_ss))
# Remove duplicate data from mom and child prep sheets
NDA_PPVT_Prep_Child <- na.omit(NDA_PPVT_Prep_Child, ss_rawscore)
View(NDA_PPVT_Prep_Child)
#### NDA Upload ####
# Create NDA prep sheet for mom and child data, select all the needed columns from prep sheet
NDA_PPVT_Prep_Child <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = oc_ppvt_rs, ss_standardscore = oc_ppvt_ss))
View(NDA_PPVT_Prep_Child)
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$subjectkey = child]
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$subjectkey == CHILD]
View(NDA_PPVT_Prep_Child)
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$interview_age < 100]
#### NDA Upload ####
# Create NDA prep sheet for mom and child data, select all the needed columns from prep sheet
NDA_PPVT_Prep_Child <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = oc_ppvt_rs, ss_standardscore = oc_ppvt_ss))
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$interview_age < 100]
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$interview_age < 100, ]
View(NDA_PPVT_Prep_Child)
# Bind child and mom data into one data frame and order by ID
NDA_PPVT_Prep <- rbind(NDA_PPVT_Prep_Child, NDA_PPVT_Prep_Mom)
#### NDA Upload ####
# Create NDA prep sheet for mom and child data, select all the needed columns from prep sheet
NDA_PPVT_Prep_Child <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = oc_ppvt_rs, ss_standardscore = oc_ppvt_ss))
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$interview_age < 100, ]
NDA_PPVT_Prep_Mom <- NDA_PPVT_Prep_Mom[NDA_PPVT_Prep_Mom$interview_age > 100, ]
View(NDA_PPVT_Prep_Mom)
# Bind child and mom data into one data frame and order by ID
NDA_PPVT_Prep <- rbind(NDA_PPVT_Prep_Child, NDA_PPVT_Prep_Mom)
View(NDA_PPVT_Prep)
View(NDA_PPVT_Prep)
View(NDA_PPVT_Prep)
# Arrange PPVT data so Mother and Child subjectkeys are next to each other for readability.
NDA_PPVT_Prep <- arrange(NDA_PPVT_Prep, src_subject_id)
View(NDA_PPVT_Prep)
# Recreate first line in orignial NDA file
PPVT_NDA <- bind_rows(mutate_all(PPVT_NDA, as.character), mutate_all(NDA_PPVT_Prep, as.character))
View(PPVT_NDA)
#source("~/GitHub/DataUploadAutomation/Upload and Tables/Data/Upload Preparation.R")
PPVT_NDA <- read.csv("ppvt_4a02_template.csv", skip = 1, stringsAsFactors = FALSE)
# Recreate first line in orignial NDA file
PPVT_NDA <- bind_rows(mutate_all(PPVT_NDA, as.character), mutate_all(NDA_PPVT_Prep, as.character))
first_line <- matrix("", nrow = 1, ncol = ncol(PPVT_NDA))
first_line[,1] <- "ppvt_4a"
# assign the second cell in first_line as 2
first_line[,2] <- "2"
# NDA output ---------
# Create a new file in folder called ppvt_4a.csv, and put first line into this file
# ppvt_4a.csv file will be saved into same folder as current r script
write.table(first_line, file = "NDA Upload/ppvt_4a.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in NDA_DCCS into dccs.cav file
write.table(PPVT_NDA, file = 'NDA Upload/ppvt_4a.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
View(PPVT_NDA)
# Set working directory and Load preparation script, NDA templates, and PPVT specific redcap data
setwd("~/GitHub/DataUploadAutomation/Upload and Tables/Data")
PPVT_NDA <- read.csv("ppvt_4a02_template.csv", skip = 1, stringsAsFactors = FALSE)
View(PPVT_NDA)
PPVT_NDA <- read.csv("ppvt_4a02_template.csv", skip = 1, stringsAsFactors = FALSE)
UPMC_PPVT_Data <- read.csv("UPMC_PPVT_Data.csv", stringsAsFactors = FALSE)
UO_PPVT_Data <- read.csv("UO_PPVT_Data.csv", stringsAsFactors = FALSE)
# Create Redcap column names for locating old names to be replaced with Prep names and NDA names later on
PPVT_names <- c("om_ppvt_rs", "om_ppvt_ss", "oc_ppvt_rs", "oc_ppvt_ss")
NDA_PPVT_names <- c("ss_rawscore", "ss_standardscore")
# Select and rename needed columns from PPVT data across both sites
UPMC_PPVT_Data <- select(UPMC_PPVT_Data, c(Fam_ID = STEADY.ID., om_ppvt_rs = Parent.PPVT.Raw.Score, om_ppvt_ss = Parent.PPVT.Standard.Score, oc_ppvt_rs = Child.PPVT.Raw.Score, oc_ppvt_ss = Child.PPVT.Standard.Score))
# Additionally, Seperate and recombine UO mom and child data so it matches UPMC format when merging
UO_PPVTMom_Data <- select(UO_PPVT_Data, c(Fam_ID = fam_id, om_ppvt_rs, om_ppvt_ss))
UO_PPVTChild_Data <- select(UO_PPVT_Data, c(Fam_ID = fam_id, oc_ppvt_rs, oc_ppvt_ss))
Redcap_Data_PPVT <- merge(na.omit(UO_PPVTMom_Data), na.omit(UO_PPVTChild_Data), all=TRUE)
# Combine UO and UPMC data into a single dataframe
PPVT_BothSite_Data <- rbind(Redcap_Data_PPVT, UPMC_PPVT_Data)
# Select relevent pedigree information from the Preparation Script's created pedigree
Pedigree_Prep <- data.frame(select(Pedigree, Fam_ID, Timepoint, child_guid, mom_guid, child_famID, FamID_Mother, interview_date, interview_age_Mom, interview_age_child, child_sex, sex_mother, GroupAssignment))
# Filter Pedigree so that is only has PPVT's Timepoint 1 data
Pedigree_Prep <- Pedigree_Prep[Pedigree_Prep$Timepoint == 1, ]
# Merge Predigree and PPVT redcap data
PPVT_PREP <- merge(Pedigree_Prep, PPVT_BothSite_Data,by = c("Fam_ID"), all.x = TRUE)
# Clean Environment
rm(Pedigree_Prep, Redcap_Data_PPVT, PPVT_BothSite_Data, UPMC_PPVT_Data, UO_PPVTChild_Data, UO_PPVTMom_Data, UO_PPVT_Data)
# Pull apart PPVT_Prep so that the data can be placed into a proper template such that Mom and child are on their own rows
# Filter mother data by Fam_ID for UO and UPMC individually to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UO_Mom <- add_column(PPVT_PREP_UO_Mom, Timepoint = "0")
PPVT_PREP_UO_Mom <- PPVT_PREP_UO_Mom[PPVT_PREP_UO_Mom$Fam_ID > 12000, ]
PPVT_PREP_UPMC_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, Timepoint, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UPMC_Mom <- PPVT_PREP_UPMC_Mom[PPVT_PREP_UPMC_Mom$Fam_ID < 12000, ]
PPVT_PREP_Child <- select(PPVT_PREP, c(Fam_ID, guid = child_guid, src_subject_id = child_famID, interview_date, interview_age = interview_age_child, sex = child_sex, GroupAssignment, Timepoint, oc_ppvt_rs, oc_ppvt_ss))
# Pull apart PPVT_Prep so that the data can be placed into a proper template such that Mom and child are on their own rows
# Filter mother data by Fam_ID for UO and UPMC individually to assign differing timepoints
PPVT_PREP_UO_Mom <- select(PPVT_PREP, c(Fam_ID, guid = mom_guid, src_subject_id = FamID_Mother, interview_date, interview_age = interview_age_Mom, sex = sex_mother, GroupAssignment, om_ppvt_rs, om_ppvt_ss))
PPVT_PREP_UO_Mom <- add_column(PPVT_PREP_UO_Mom, Timepoint = "0")
PPVT_PREP_UO_Mom <- PPVT_PREP_UO_Mom[PPVT_PREP_UO_Mom$Fam_ID > 12000, ]
# Merge selected data together so that mother and child each have their own rows, you should now have the complete PPVT_PREP sheet
PPVT_PREP_Mom <- merge(PPVT_PREP_UO_Mom, PPVT_PREP_UPMC_Mom, all = TRUE)
PPVT_PREP <- merge(PPVT_PREP_Mom, PPVT_PREP_Child, all = TRUE)
View(PPVT_PREP)
# Clean Environment of intermediaries
rm(PPVT_PREP_UO_Mom, PPVT_PREP_UPMC_Mom, PPVT_PREP_Child, PPVT_PREP_Mom)
#### NDA Upload ####
# Create NDA prep sheet for mom and child data, select all the needed columns from prep sheet
NDA_PPVT_Prep_Child <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = oc_ppvt_rs, ss_standardscore = oc_ppvt_ss))
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$interview_age < 100, ]
NDA_PPVT_Prep_Mom <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = om_ppvt_rs, ss_standardscore = om_ppvt_ss))
NDA_PPVT_Prep_Mom <- NDA_PPVT_Prep_Mom[NDA_PPVT_Prep_Mom$interview_age > 100, ]
# Bind child and mom data into one data frame and order by ID
NDA_PPVT_Prep <- rbind(NDA_PPVT_Prep_Child, NDA_PPVT_Prep_Mom)
#### NDA Upload ####
# Create NDA prep sheet separately for mom and child data since NDA uses one score to represent both, select all the needed columns from prep sheet
NDA_PPVT_Prep_Child <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = oc_ppvt_rs, ss_standardscore = oc_ppvt_ss, visit = Timepoint))
NDA_PPVT_Prep_Child <- NDA_PPVT_Prep_Child[NDA_PPVT_Prep_Child$interview_age < 100, ]
NDA_PPVT_Prep_Mom <- select(PPVT_PREP, c(subjectkey = guid, src_subject_id, interview_date, interview_age, sex, ss_rawscore = om_ppvt_rs, ss_standardscore = om_ppvt_ss, visit = Timepoint))
NDA_PPVT_Prep_Mom <- NDA_PPVT_Prep_Mom[NDA_PPVT_Prep_Mom$interview_age > 100, ]
# Bind child and mom data into one data frame
NDA_PPVT_Prep <- rbind(NDA_PPVT_Prep_Child, NDA_PPVT_Prep_Mom)
View(NDA_PPVT_Prep)
# Recreate first line in original NDA file
PPVT_NDA <- bind_rows(mutate_all(PPVT_NDA, as.character), mutate_all(NDA_PPVT_Prep, as.character))
first_line <- matrix("", nrow = 1, ncol = ncol(PPVT_NDA))
first_line[,1] <- "ppvt_4a"
# assign the second cell in first_line as 2
first_line[,2] <- "2"
# NDA output ---------
# Create a new file in folder called ppvt_4a.csv, and put first line into this file
# ppvt_4a.csv file will be saved into the NDA Upload Folder
write.table(first_line, file = "NDA Upload/ppvt_4a.csv", sep = ",", append = FALSE, quote = FALSE, na = "", col.names = FALSE, row.names = FALSE)
# Append data in NDA_DCCS into dccs.cav file
write.table(PPVT_NDA, file = 'NDA Upload/ppvt_4a.csv', sep = ",", append = TRUE, na = "", quote = FALSE, row.names = FALSE)
#Clean Global Environment of intermediaries
rm(first_line, PPVT_names, NDA_PPVT_Prep, NDA_PPVT_Prep_Child, NDA_PPVT_Prep_Mom)
View(PPVT_NDA)
